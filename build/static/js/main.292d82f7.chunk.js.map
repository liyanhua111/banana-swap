{"version":3,"sources":["components/identicon/index.tsx","components/accountInfo.tsx","components/walletConnect.tsx","components/appBar.tsx","components/numericInput.tsx","components/slippage/index.tsx","components/settings.tsx","components/tokenIcon/index.tsx","models/airdrops.ts","models/marketOverrides.ts","context/market.tsx","components/pool/address.tsx","components/pool/supplyOverview.tsx","components/currencyInput/index.tsx","components/pool/config.tsx","utils/currencyPair.tsx","components/labels.tsx","components/pool/add.tsx","components/pool/remove.tsx","components/charts/historical.tsx","components/pool/card.tsx","components/pool/quickView.tsx","components/migration/index.tsx","components/charts/index.tsx","components/pool/view.tsx","components/trade/index.tsx","components/exchange.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/explorerLink.tsx","utils/utils.ts","utils/accounts.tsx","models/pool.ts","utils/eventEmitter.ts","utils/connection.tsx","utils/ids.tsx","wallet-adapters/ledger/core.ts","models/tokenSwap.ts","utils/pools.tsx","models/index.ts","utils/notifications.tsx","wallet-adapters/types.ts","wallet-adapters/ledger/index.tsx","wallet-adapters/solong/index.tsx","wallet-adapters/phantom/index.tsx","wallet-adapters/math/index.tsx","context/wallet.tsx"],"names":["Identicon","props","address","style","ref","useRef","useEffect","current","innerHTML","className","appendChild","Jazzicon","width","parseInt","bs58","decode","toString","slice","AccountInfo","wallet","useWallet","account","useNativeAccount","publicKey","lamports","LAMPORTS_PER_SOL","toFixed","shortenAddress","toBase58","marginLeft","WalletConnect","children","connected","select","connect","disconnect","menu","textAlign","type","padding","Item","key","onClick","color","overlay","trigger","cursor","Button","AppBar","location","useLocation","history","useHistory","mode","selectedKeys","pathname","to","href","target","rel","left","size","push","right","NumericInput","onChange","e","value","test","onBlur","valueTemp","charAt","length","startsWith","replace","this","maxLength","React","Component","Slippage","useSlippageConfig","slippage","setSlippage","slippagePct","useState","setValue","itemStyle","margin","display","flexDirection","alignItems","map","item","val","border","placeholder","fontSize","boxShadow","borderColor","outline","x","cappedSlippage","Math","min","parseFloat","safeCappedSlippage","Number","isNaN","newValue","isFinite","Settings","useConnectionConfig","endpoint","setEndpoint","onSelect","marginRight","ENDPOINTS","name","Option","TokenIcon","tokenMap","failed","setFailed","icon","getTokenIcon","mintAddress","alt","onError","height","src","marginTop","borderRadius","backgroundColor","backgroundClip","alignSelf","PoolIcon","mintA","mintB","POOLS_WITH_AIRDROP","MINT_TO_MARKET","INITAL_LIQUIDITY_DATE","Date","MarketsContext","createContext","marketEmitter","EventEmitter","MarketProvider","pools","useCachedPool","accountsToObserve","useMemo","Map","dailyVolume","setDailyVolume","connection","Connection","marketByMint","Set","p","pubkeys","holdingMints","flat","values","reduce","acc","SERUM_TOKEN","TOKEN_MINTS","find","a","marketAddress","marketName","marketInfo","MARKETS","filter","m","deprecated","set","timer","bonfidaTimer","updateData","refreshAccounts","keys","raiseMarketUpdated","window","setTimeout","bonfidaQuery","fetch","resp","json","data","pool_identifier","reverseSerumMarketCache","forEach","mint","get","allMarkets","getMultipleAccounts","undefined","cache","then","array","index","market","programId","id","add","decoded","Market","getLayout","details","pubkey","info","registerParser","baseMint","MintParser","quoteMint","bids","OrderBookParser","asks","toQuery","initalQuery","clearTimeout","midPriceInUSD","useCallback","getMidPrice","subscribeToMarket","bid","ask","delete","Provider","useEnrichedPools","context","useContext","enriched","setEnriched","marketsByMint","subscriptions","update","poolData","TODAY","mints","sort","getMint","account0","getAccount","holdingAccounts","account1","accountA","accountB","baseMid","baseReserveUSD","convert","quoteReserveUSD","poolMint","supply","eqn","airdropYield","poolWithAirdrop","drop","pool","equals","airdrops","midPrice","amount","calculateAirdropYield","volume","volume24h","volume24hA","fees24h","LIQUIDITY_PROVIDER_FEE","SERUM_FEE","fees","apy","apy24h","feeAccount","ownedPct","toNumber","baseVolume","quoteVolume","daysSinceInception","floor","getTime","apy0","apy1","max","lpMint","getPoolName","link","names","getTokenName","accounts","liquidityA","liquidityAinUsd","liquidityB","liquidityBinUsd","pow","decimals","liquidity","extra","raw","createEnrichedPools","dispose","onMarket","Orderbook","LAYOUT","STABLE_COINS","has","decodedMarket","baseMintDecimals","quoteMintDecimals","bidsBook","accountFlags","slab","asksBook","bestBid","getL2","bestAsk","PublicKey","Address","label","span","code","shape","CopyOutlined","navigator","clipboard","writeText","PoolAddress","AccountsAddress","aName","bName","account2","mint1","mint2","AdressesPopover","placement","title","content","showLabel","InfoCircleOutlined","SupplyOverview","chartDiv","div","instance","echarts","getInstanceByDom","init","tokens","setOption","tooltip","formatter","params","formatUSD","format","tokenAmount","formatNumber","series","top","bottom","animation","show","rich","c","lineHeight","align","r","normal","Select","TokenDisplay","showBalance","tokenMint","tokenAccount","useAccountByMint","balance","hasBalance","justifyContent","CurrencyInput","userAccounts","useUserAccounts","renderPopularTokens","symbol","grouppedUserAccounts","b","gt","isKnownMint","concat","additionalAccounts","findIndex","t","renderAdditionalTokens","list","sorted","userUiBalance","currentAccount","bodyStyle","onInputChange","hideSelect","showSearch","minWidth","onMintChange","filterOption","input","option","toLowerCase","indexOf","PoolCurrencyInput","FeeInput","numerator","denominator","DEFAULT_DENOMINATOR","PriceParameters","setOptions","options","token_b_price","PoolConfigCard","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","feesInput","ENABLE_FEES_INPUT","defaultValue","curveType","CurveType","ConstantProduct","ConstantPrice","ConstantProductWithOffset","action","CurrencyPairContext","useCurrencyLeg","config","defaultMint","setAmount","setMintAddress","setMint","convertAmount","sufficientBalance","CurrencyPairProvider","useConnection","lastTypedAccount","setLastTypedAccount","PoolOperation","Add","poolOperation","setPoolOperation","hostFeeNumerator","hostFeeDenominator","base","mintAddressA","setMintAddressA","amountA","setAmountA","quote","mintAddressB","setMintAddressB","amountB","setAmountB","usePoolForBasket","document","search","defaultBase","defaultQuote","nameToToken","pair","URLSearchParams","items","split","isValidAddress","getDefaultTokens","calculateDependent","independent","setDependent","calculateDependentAmount","result","A","B","useCurrencyPairState","INSUFFICIENT_FUNDS_LABEL","tokenName","generateActionLabel","ignoreToBalance","antIcon","LoadingOutlined","spin","AddToLiquidity","pendingTx","setPendingTx","depositType","setDepositType","depositToken","setDepositToken","isLatestLayout","programIds","swapLayout","TokenSwapLayout","executeAction","currentDepositToken","getDepositToken","components","addLiquidity","catch","console","log","notify","description","message","token_b_offset","hasSufficientBalance","createPoolButton","disabled","indicator","addLiquidityButton","Group","handleToggleDepositType","getTokenOptions","dToken","PoolPrice","useMint","ratio","f","formatPriceNumber","YourPosition","baseMintAddress","quoteMintAddress","RemoveLiquidity","removeRatio","withdrawType","withdrawToken","liquidityAmount","onRemove","removeExactOneLiquidity","removeLiquidity","generateRemoveLabel","RemoveLiquidityEntry","inputType","setInputType","setWithdrawType","setWithdrawToken","lastTyped","liquidityPercentage","inputInfo","setInputInfo","poolAmount","tokenA","tokenAAmount","tokenB","tokenBAmount","inputsDescription","setInputsDescription","handleInputChange","inputSource","Text","tipFormatter","handleToggleWithdrawType","API_ENDPOINTS","PoolLineChart","memo","apiUrl","api","limit","chartName","echartsRef","loading","setLoading","apiFilter","bonfidaDataChartQuery","finalData","updateChart","textStyle","axisPointer","grid","containLabel","xAxis","inverse","getComputedTime","yAxis","scale","splitLine","getComputedData","tip","Title","level","HistoricalVolume","d","formatShortDate","time","HistoricalLiquidity","groupByTime","groupedData","Object","Typography","PoolCard","displayMode","setDisplayMode","small","userInfo","AlignLeftOutlined","LineChartOutlined","formatPct","PoolItem","poolContribution","contributionInUSD","poolDetails","feesInUSD","isFeeAccount","PoolAccounts","useOwnedPools","legacy","userPools","renderEmpty","image","Empty","PRESENTED_IMAGE_SIMPLE","MigrationModal","visible","setVisable","ack","setAck","executing","setExecuting","completed","setCompleted","activePools","legacyOwned","poolsToMigrate","fromPool","toPool","handleOk","i","queryMint","queryAccount","baseAccount","quoteAccount","ownershipRatio","baseAmount","quoteAmount","toAccounts","reverse","handleCancel","onOk","onCancel","closable","footer","Search","Input","FlashText","activeClass","setActiveClass","text","ChartsView","setSearch","totals","setTotals","usePools","useLocalStorageState","infoDisplayType","setInfoDisplayType","searchRegex","RegExp","breadcrumb","row","path","columns","dataIndex","render","record","sorter","defaultSortOrder","fontFamily","SettingOutlined","onSearch","TableOutlined","OneToOneOutlined","gutter","dataSource","pagination","pageSize","PoolOverview","owned","o","TradeEntry","handleSwap","swap","SwapGivenInput","tempMint","tempAmount","op","SwapGivenProceeds","TradeInfo","amountOut","setAmountOut","priceImpact","setPriceImpact","lpFee","setLpFee","exchangeRate","setExchangeRate","priceAccount","setPriceAccount","minAmountOut","supplyRatio","enrichedA","enrichedB","calculatedRatio","abs","lpFeeStr","SwapOutlined","QuestionCircleOutlined","colorWarning","ExchangeView","tabStyle","tabList","tab","activeTab","headStyle","position","tabProps","tabBarGutter","activeTabKey","onTabChange","handleTabChange","Routes","basename","exact","component","App","paddingLeft","paddingTop","data-color-scheme","data-icon","data-size","data-show-count","aria-label","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","ExplorerLink","defaultState","storedState","localStorage","getItem","JSON","parse","state","setState","setLocalStorageState","newState","removeItem","setItem","stringify","chars","shorten","knownSymbol","substring","logoURI","join","chunks","Array","apply","ceil","_","rate","BN","precision","rem","mod","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","DateTimeFormat","day","month","valueCheckpoints","defaultIndex","colorCodes","closest","first","POSITIVE_INFINITY","second","AccountsContext","accountEmitter","pendingMintCalls","mintCache","pendingAccountCalls","accountsCache","pendingCalls","genericCache","getAccountInfo","pubKey","Error","tokenAccountFactory","getMintInfo","Buffer","from","deserializeMint","buffer","keyToAccountParser","query","parser","obj","deserialize","addAccount","deleteAccount","raiseAccountUpdated","addMint","getCachedAccount","predicate","deserializeAccount","wrapNativeAccount","WRAPPED_SOL_MINT","owner","u64","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","PRECACHED_OWNERS","precacheUserTokenAccounts","getTokenAccountsByOwner","token","AccountsProvider","tokenAccounts","setTokenAccounts","setUserAccounts","nativeAccount","setNativeAccount","onAccountChange","UseNativeAccount","selectUserAccounts","SWAP_HOST_FEE_ADDRESS","response","onAccount","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","MintLayout","removeProgramAccountChangeListener","commitment","Promise","all","chunk","getMultipleAccountsCore","rest","args","_buildArgs","_rpcRequest","unsafeRes","err","allPools","fromBuffer","delegateOption","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","freezeAuthorityOption","freezeAuthority","AccountUpdateEvent","MarketUpdateEvent","ids","emitter","Emitter","callback","on","removeListener","emit","chainID","ChainID","MainnetBeta","clusterApiUrl","Testnet","Devnet","DEFAULT","ConnectionContext","sendConnection","env","ConnectionProvider","chain","end","setTokens","setTokenMap","TokenListProvider","resolve","res","filterByChainId","excludeByTag","getList","knownMints","setProgramIds","Account","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","regex","exec","lastIndex","sendTransaction","instructions","signers","awaitConfirmation","transaction","Transaction","instruction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","rawTransaction","serialize","skipPreflight","sendRawTransaction","status","SWAP_PROGRAM_ID","SWAP_PROGRAM_LEGACY_IDS","SWAP_PROGRAM_LAYOUT","TOKEN_PROGRAM_ID","SWAP_PROGRAM_OWNER_FEE_ADDRESS","process","REACT_APP_SWAP_HOST_FEE_ADDRESS","debug","PROGRAM_IDS","layout","envName","swap_legacy","ledgerSend","transport","p1","payload","p2","payloadOffset","send","reply","harden","n","getSolanaDerivationPath","change","derivationPath","alloc","offset","writeUInt8","writeUInt32BE","messageBytes","serializeMessage","signBytes","bytes","numPaths","getPublicKey","publicKeyBytes","property","BufferLayout","uint64","FEE_LAYOUT","TokenSwapLayoutLegacyV0","TokenSwapLayoutV1","CURVE_NODE","addVariant","createInitSwapInstruction","tokenSwapAccount","authority","tokenAccountA","tokenAccountB","tokenPool","destinationAccount","tokenProgramId","swapProgramId","nonce","isLatest","isSigner","isWritable","fields","commandDataLayout","encodeLength","encode","TransactionInstruction","depositInstruction","tokenSwap","transferAuthority","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","dataLayout","Numberu64","toBuffer","depositExactOneInstruction","source","sourceTokenAmount","minimumPoolTokenAmount","withdrawInstruction","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","withdrawExactOneInstruction","userAccount","maximumTokenAmount","swapInstruction","userSource","poolSource","poolDestination","userDestination","amountIn","minimumAmountOut","programOwner","minAmount0","minAmount1","cleanupInstructions","getMinimumBalanceForRentExemption","accountRentExempt","findOrCreateAccountByMint","isLatestSwap","approveAmount","program","Token","createCloseAccountInstruction","liquidityMaxAmount","SLIPPAGE","tokenMatchAccount","toAccount","holdingA","holdingB","fromAccount","getWrappedAccount","hostFeeAccount","_addLiquidityExactOneExistingPool","_addLiquidityNewPool","_addLiquidityExistingPool","getHoldings","toPoolInfo","setPools","queryPools","swapId","isLegacy","poolsArray","getProgramAccounts","TokenSwapLayoutV0","holdings","h","leg","subID","updated","filtered","setPool","sortedMints","matchingPool","every","poolQuantities","entries","amount0","bestPool","ownedPools","reserve0","reserve1","amount1","fromKeyA","fromKeyB","reserve","liquidityToken","fromKey","payer","excluded","accountToFind","isWrappedSol","newToAccount","createSplAccount","estimateProceedsFromInput","inputQuantityInPool","proceedsQuantityInPool","inputAmount","estimateInputFromProceeds","proceedsAmount","offsetAmount","offsetCurve","curve","isFirstIndependent","depPrecision","indPrecision","indAdjustedAmount","indBasketQuantity","depBasketQuantity","constantPrice","depAdjustedAmount","some","liquidityTokenMint","SystemProgram","fromPubkey","newAccountPubkey","space","createAccount","findProgramAddress","createInitMintInstruction","mintPublicKey","depositorAccount","createTransferInstruction","tokenProgram","createApproveInstruction","createRevokeInstruction","toCheck","createInitAccountInstruction","notification","opacity","DEFAULT_PUBLIC_KEY","LedgerWalletAdapter","_connecting","_publicKey","_transport","transactions","signed","signature","addSignature","TransportWebUSB","create","close","SolongWalletAdapter","_onProcess","_connected","bind","solong","signAllTransactions","selectAccount","finally","PhantomWalletAdapter","_provider","solana","isPhantom","provider","open","isConnected","autoApprove","MathWalletAdapter","isMathWallet","ASSET_URL","WALLET_PROVIDERS","url","adapter","WalletContext","WalletProvider","autoConnect","setAutoConnect","providerUrl","setProviderUrl","Wallet","setConnected","walletPublicKey","keyToDisplay","isModalVisible","setIsModalVisible","providerName","okText","okButtonProps","marginBottom","setProvider"],"mappings":"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","file":"static/js/main.292d82f7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nimport Jazzicon from \"jazzicon\";\nimport bs58 from \"bs58\";\nimport \"./style.less\";\n\nexport const Identicon = (props: {\n  address?: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  const { address, style } = props;\n  const ref = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.className = props.className || \"\";\n      ref.current.appendChild(\n        Jazzicon(\n          style?.width || 16,\n          parseInt(bs58.decode(address).toString(\"hex\").slice(5, 15), 16)\n        )\n      );\n    }\n  }, [address, style, props.className]);\n\n  return (\n    <div className=\"identicon-wrapper\" ref={ref as any} style={props.style} />\n  );\n};\n","import React from \"react\";\nimport { useWallet } from \"../context/wallet\";\nimport { shortenAddress } from \"./../utils/utils\";\nimport { Identicon } from \"./identicon\";\nimport { useNativeAccount } from \"./../utils/accounts\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nexport const AccountInfo = (props: {}) => {\n  const { wallet } = useWallet();\n  const { account } = useNativeAccount();\n\n  if (!wallet || !wallet.publicKey) {\n    return null;\n  }\n\n  return (\n    <div className=\"wallet-wrapper\">\n      <span>\n        {((account?.lamports || 0) / LAMPORTS_PER_SOL).toFixed(6)} SOL\n      </span>\n      <div className=\"wallet-key\">\n        {shortenAddress(`${wallet.publicKey}`)}\n        <Identicon\n          address={wallet.publicKey.toBase58()}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Dropdown, Menu } from \"antd\";\nimport { useWallet } from \"../context/wallet\";\nimport { ExplorerLink } from \"./explorerLink\";\n\nexport const WalletConnect: FunctionComponent = ({ children }) => {\n  const { connected, wallet, select, connect, disconnect } = useWallet();\n  const publicKey = (connected && wallet?.publicKey?.toBase58()) || \"\";\n\n  const menu = (\n    <Menu style={{ textAlign: \"right\" }}>\n      {connected && (\n        <ExplorerLink\n          type=\"address\"\n          address={publicKey}\n          style={{ padding: 12 }}\n        />\n      )}\n      <Menu.Item key=\"3\" onClick={select}>\n        Change Wallet\n      </Menu.Item>\n      {connected && (\n        <Menu.Item\n          key=\"2\"\n          style={{ color: \"rgba(255, 0, 0, 0.7)\" }}\n          onClick={disconnect}\n        >\n          Disconnect\n        </Menu.Item>\n      )}\n    </Menu>\n  );\n\n  if (connected) {\n    return (\n      <Dropdown overlay={menu} trigger={[\"hover\"]}>\n        <div style={{ cursor: \"pointer\" }}>{children}</div>\n      </Dropdown>\n    );\n  }\n\n  return (\n    <Dropdown.Button onClick={connected ? disconnect : connect} overlay={menu}>\n      {connected ? \"Disconnect\" : \"Connect\"}\n    </Dropdown.Button>\n  );\n};\n","import React from \"react\";\nimport { Button, Menu } from \"antd\";\nimport { useWallet } from \"../context/wallet\";\nimport { AccountInfo } from \"./accountInfo\";\nimport { WalletConnect } from \"./walletConnect\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nexport const AppBar = (props: { left?: JSX.Element; right?: JSX.Element }) => {\n  const { connected } = useWallet();\n  const location = useLocation();\n  const history = useHistory();\n\n  const TopBar = (\n    <div className=\"App-Bar\">\n      <div className=\"App-Bar-left\">\n        <div className=\"App-logo\" />\n        <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\n          <Menu.Item key=\"/\">\n            <Link\n              to={{\n                pathname: \"/\",\n              }}\n            >\n              Swap\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/add\">\n            <Link\n              to={{\n                pathname: \"/add\",\n              }}\n            >\n              Pool\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/info\">\n            <Link\n              to={{\n                pathname: \"/info\",\n              }}\n            >\n              Charts\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"trade\">\n            <a\n              href={\"https://dex.projectserum.com\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Trade\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n          <Menu.Item key=\"help\">\n            <a\n              href={\"https://serum-academy.com/en/serum-swap/\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Help\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n        </Menu>\n        {props.left}\n      </div>\n      <div className=\"App-Bar-right\">\n        <WalletConnect>\n          <AccountInfo />\n        </WalletConnect>\n        {connected && (\n          <Button\n            type=\"text\"\n            size=\"large\"\n            onClick={() => history.push({ pathname: \"/pool\" })}\n          >\n            My Pools\n          </Button>\n        )}\n        {props.right}\n      </div>\n    </div>\n  );\n\n  return TopBar;\n};\n","import React from \"react\";\nimport { Input } from \"antd\";\n\nexport class NumericInput extends React.Component<any, any> {\n  onChange = (e: any) => {\n    const { value } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n    if (reg.test(value) || value === \"\" || value === \"-\") {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    let valueTemp = value;\n    if (value.charAt(value.length - 1) === \".\" || value === \"-\") {\n      valueTemp = value.slice(0, -1);\n    }\n    if (value.startsWith(\".\") || value.startsWith(\"-.\")) {\n      valueTemp = valueTemp.replace(\".\", \"0.\");\n    }\n    onChange(valueTemp.replace(/0*(\\d+)/, \"$1\"));\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    return (\n      <Input\n        {...this.props}\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        maxLength={25}\n      />\n    );\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { useSlippageConfig } from \"./../../utils/connection\";\nimport { NumericInput } from \"./../numericInput\";\n\nconst MAX_SLIPPAGE = 25.0\nconst DEFAULT_MIN_SLIPPAGE = 0.1\n\nexport const Slippage = () => {\n  const { slippage, setSlippage } = useSlippageConfig();\n  const slippagePct = slippage * 100;\n  const [value, setValue] = useState(slippagePct.toString());\n\n  useEffect(() => {\n    setValue(slippagePct.toString());\n  }, [slippage, slippagePct]);\n\n  const isSelected = (val: number) => {\n    return val === slippagePct ? \"primary\" : \"default\";\n  };\n\n  const itemStyle: React.CSSProperties = {\n    margin: 5,\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      {[0.1, 0.5, 1.0].map((item) => {\n        return (\n          <Button\n            key={item.toString()}\n            style={itemStyle}\n            type={isSelected(item)}\n            onClick={() => setSlippage(item / 100.0)}\n          >\n            {item}%\n          </Button>\n        );\n      })}\n      <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n        <NumericInput\n          className=\"slippage-input\"\n          size=\"small\"\n          placeholder={value}\n          value={value}\n          style={{\n            width: 50,\n            fontSize: 14,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          onChange={(x: any) => {\n            const cappedSlippage = Math.min(parseFloat(x), MAX_SLIPPAGE);\n            const safeCappedSlippage = Number.isNaN(cappedSlippage) ? DEFAULT_MIN_SLIPPAGE.toString() : cappedSlippage.toString();\n            setValue(safeCappedSlippage);\n            const newValue = parseFloat(safeCappedSlippage) / 100.0;\n            if (Number.isFinite(newValue)) {\n              setSlippage(newValue);\n            }\n          }}\n        />\n        %\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport { ENDPOINTS, useConnectionConfig } from \"../utils/connection\";\nimport { Slippage } from \"./slippage\";\n\nexport const Settings = () => {\n  const { endpoint, setEndpoint } = useConnectionConfig();\n\n  return (\n    <>\n      <div>\n        Transactions: Settings:\n        <div>\n          Slippage:\n          <Slippage />\n        </div>\n      </div>\n      <div style={{ display: \"grid\" }}>\n        Network:{\" \"}\n        <Select\n          onSelect={setEndpoint}\n          value={endpoint}\n          style={{ marginRight: 8 }}\n        >\n          {ENDPOINTS.map(({ name, endpoint }) => (\n            <Select.Option value={endpoint} key={endpoint}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </div>\n    </>\n  );\n};\n","import { Identicon } from \"./../identicon\";\nimport React, { useState } from \"react\";\nimport { getTokenIcon } from \"../../utils/utils\";\nimport { useConnectionConfig } from \"../../utils/connection\";\n\nexport const TokenIcon = (props: {\n  mintAddress: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  const { tokenMap } = useConnectionConfig();\n  const [failed, setFailed] = useState(false);\n  const icon = getTokenIcon(tokenMap, props.mintAddress);\n\n  if (icon && !failed) {\n    return (\n      <img\n        alt=\"Token icon\"\n        className={props.className}\n        key={props.mintAddress}\n        onError={() => setFailed(true)}\n        width=\"20\"\n        height=\"20\"\n        src={icon}\n        style={{\n          marginRight: \"0.5rem\",\n          marginTop: \"0.11rem\",\n          borderRadius: \"1rem\",\n          backgroundColor: \"white\",\n          backgroundClip: \"padding-box\",\n          ...props.style,\n        }}\n      />\n    );\n  }\n\n  return (\n    <Identicon\n      address={props.mintAddress}\n      style={{\n        marginRight: \"0.5rem\",\n        display: \"flex\",\n        alignSelf: \"center\",\n        width: 20,\n        height: 20,\n        marginTop: 2,\n        ...props.style,\n      }}\n    />\n  );\n};\n\nexport const PoolIcon = (props: {\n  mintA: string;\n  mintB: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  return (\n    <div className={props.className} style={{ display: \"flex\" }}>\n      <TokenIcon\n        mintAddress={props.mintA}\n        style={{ marginRight: \"-0.5rem\", ...props.style }}\n      />\n      <TokenIcon mintAddress={props.mintB} />\n    </div>\n  );\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\ninterface PoolAirdrop {\n  pool: PublicKey;\n  airdrops: {\n    mint: PublicKey;\n    amount: number;\n  }[];\n}\n\nexport const POOLS_WITH_AIRDROP: PoolAirdrop[] = [];\n","// use to override serum market to use specifc mint\nexport const MINT_TO_MARKET: { [key: string]: string } = {};\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { POOLS_WITH_AIRDROP } from \"./../models/airdrops\";\nimport { MINT_TO_MARKET } from \"./../models/marketOverrides\";\nimport {\n  convert,\n  getPoolName,\n  getTokenName,\n  KnownTokenMap,\n  STABLE_COINS,\n} from \"./../utils/utils\";\nimport { useConnectionConfig } from \"./../utils/connection\";\nimport {\n  cache,\n  getMultipleAccounts,\n  MintParser,\n  ParsedAccountBase,\n  useCachedPool,\n} from \"./../utils/accounts\";\nimport { Market, MARKETS, Orderbook, TOKEN_MINTS } from \"@project-serum/serum\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\nimport { PoolInfo } from \"../models\";\nimport { EventEmitter } from \"./../utils/eventEmitter\";\nimport { LIQUIDITY_PROVIDER_FEE, SERUM_FEE } from \"../utils/pools\";\n\ninterface RecentPoolData {\n  pool_identifier: string;\n  volume24hA: number;\n}\n\nexport interface MarketsContextState {\n  midPriceInUSD: (mint: string) => number;\n  marketEmitter: EventEmitter;\n  accountsToObserve: Map<string, number>;\n  marketByMint: Map<string, SerumMarket>;\n\n  subscribeToMarket: (mint: string) => () => void;\n\n  dailyVolume: Map<string, RecentPoolData>;\n}\n\nconst INITAL_LIQUIDITY_DATE = new Date(\"2020-10-27\");\nconst REFRESH_INTERVAL = 30_000;\n\nexport const BONFIDA_POOL_INTERVAL = 30 * 60_000; // 30 min\n\nconst MarketsContext = React.createContext<MarketsContextState | null>(null);\n\nconst marketEmitter = new EventEmitter();\n\nexport function MarketProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const { pools } = useCachedPool();\n  const accountsToObserve = useMemo(() => new Map<string, number>(), []);\n  const [dailyVolume, setDailyVolume] = useState<Map<string, RecentPoolData>>(\n    new Map()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const marketByMint = useMemo(() => {\n    return [\n      ...new Set(pools.map((p) => p.pubkeys.holdingMints).flat()).values(),\n    ].reduce((acc, key) => {\n      const mintAddress = key.toBase58();\n\n      const SERUM_TOKEN = TOKEN_MINTS.find(\n        (a) => a.address.toBase58() === mintAddress\n      );\n\n      const marketAddress = MINT_TO_MARKET[mintAddress];\n      const marketName = `${SERUM_TOKEN?.name}/USDC`;\n      const marketInfo = MARKETS.filter(m => !m.deprecated).find(\n        (m) => m.name === marketName || m.address.toBase58() === marketAddress\n      );\n\n      if (marketInfo) {\n        acc.set(mintAddress, {\n          marketInfo,\n        });\n      }\n\n      return acc;\n    }, new Map<string, SerumMarket>()) as Map<string, SerumMarket>;\n  }, [pools]);\n\n  useEffect(() => {\n    let timer = 0;\n    let bonfidaTimer = 0;\n\n    const updateData = async () => {\n      await refreshAccounts(connection, [...accountsToObserve.keys()]);\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      timer = window.setTimeout(() => updateData(), REFRESH_INTERVAL);\n    };\n\n    const bonfidaQuery = async () => {\n      try {\n        const resp = await window.fetch(\n          \"https://serum-api.bonfida.com/pools-recent\"\n        );\n        const data = await resp.json();\n        const map = (data?.data as RecentPoolData[]).reduce((acc, item) => {\n          acc.set(item.pool_identifier, item);\n          return acc;\n        }, new Map<string, RecentPoolData>());\n\n        setDailyVolume(map);\n      } catch {\n        // ignore\n      }\n\n      bonfidaTimer = window.setTimeout(\n        () => bonfidaQuery(),\n        BONFIDA_POOL_INTERVAL\n      );\n    };\n\n    const initalQuery = async () => {\n      const reverseSerumMarketCache = new Map<string, string>();\n      [...marketByMint.keys()].forEach((mint) => {\n        const m = marketByMint.get(mint);\n        if (m) {\n          reverseSerumMarketCache.set(m.marketInfo.address.toBase58(), mint);\n        }\n      });\n\n      const allMarkets = [...marketByMint.values()].map((m) => {\n        return m.marketInfo.address.toBase58();\n      });\n\n      await getMultipleAccounts(\n        connection,\n        // only query for markets that are not in cahce\n        allMarkets.filter((a) => cache.get(a) === undefined),\n        \"single\"\n      ).then(({ keys, array }) => {\n        allMarkets.forEach(() => {});\n\n        return array.map((item, index) => {\n          const marketAddress = keys[index];\n          const mintAddress = reverseSerumMarketCache.get(marketAddress);\n          if (mintAddress  && item) {\n            const market = marketByMint.get(mintAddress);\n\n            if (market) {\n              const programId = market.marketInfo.programId;\n              const id = market.marketInfo.address;\n              cache.add(id, item, (id, acc) => {\n                const decoded = Market.getLayout(programId).decode(acc.data);\n\n                const details = {\n                  pubkey: id,\n                  account: {\n                    ...acc,\n                  },\n                  info: decoded,\n                } as ParsedAccountBase;\n\n                cache.registerParser(details.info.baseMint, MintParser);\n                cache.registerParser(details.info.quoteMint, MintParser);\n                cache.registerParser(details.info.bids, OrderBookParser);\n                cache.registerParser(details.info.asks, OrderBookParser);\n\n                return details;\n              });\n            }\n          }\n\n          return item;\n        });\n      });\n\n      const toQuery = new Set<string>();\n      allMarkets.forEach((m) => {\n        const market = cache.get(m);\n        if (!market) {\n          return;\n        }\n\n        const decoded = market;\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.baseMint.toBase58());\n        }\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.quoteMint.toBase58());\n        }\n\n        toQuery.add(decoded.info.bids.toBase58());\n        toQuery.add(decoded.info.asks.toBase58());\n\n        // TODO: only update when someone listnes to it\n      });\n\n      await refreshAccounts(connection, [...toQuery.keys()]);\n\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      // start update loop\n      updateData();\n      bonfidaQuery();\n    };\n\n    initalQuery();\n\n    return () => {\n      window.clearTimeout(bonfidaTimer);\n      window.clearTimeout(timer);\n    };\n  }, [pools, marketByMint, accountsToObserve, connection]);\n\n  const midPriceInUSD = useCallback(\n    (mintAddress: string) => {\n      return getMidPrice(\n        marketByMint.get(mintAddress)?.marketInfo.address.toBase58(),\n        mintAddress\n      );\n    },\n    [marketByMint]\n  );\n\n  const subscribeToMarket = useCallback(\n    (mintAddress: string) => {\n      const info = marketByMint.get(mintAddress);\n      const market = cache.get(info?.marketInfo.address.toBase58() || \"\");\n      if (!market) {\n        return () => {};\n      }\n\n      // TODO: get recent volume\n\n      const bid = market.info.bids.toBase58();\n      const ask = market.info.asks.toBase58();\n      accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) + 1);\n      accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) + 1);\n\n      // TODO: add event queue to query for last trade\n\n      return () => {\n        accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) - 1);\n        accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) - 1);\n\n        // cleanup\n        [...accountsToObserve.keys()].forEach((key) => {\n          if ((accountsToObserve.get(key) || 0) <= 0) {\n            accountsToObserve.delete(key);\n          }\n        });\n      };\n    },\n    [marketByMint, accountsToObserve]\n  );\n\n  return (\n    <MarketsContext.Provider\n      value={{\n        midPriceInUSD,\n        marketEmitter,\n        accountsToObserve,\n        marketByMint,\n        subscribeToMarket,\n        dailyVolume: dailyVolume,\n      }}\n    >\n      {children}\n    </MarketsContext.Provider>\n  );\n}\n\nexport const useMarkets = () => {\n  const context = useContext(MarketsContext);\n  return context as MarketsContextState;\n};\n\nexport const useMidPriceInUSD = (mint: string) => {\n  const { midPriceInUSD, subscribeToMarket, marketEmitter } = useContext(\n    MarketsContext\n  ) as MarketsContextState;\n  const [price, setPrice] = useState<number>(0);\n\n  useEffect(() => {\n    let subscription = subscribeToMarket(mint);\n    const update = () => {\n      if (midPriceInUSD) {\n        setPrice(midPriceInUSD(mint));\n      }\n    };\n\n    update();\n    const dispose = marketEmitter.onMarket(update);\n\n    return () => {\n      subscription();\n      dispose();\n    };\n  }, [midPriceInUSD, mint, marketEmitter, subscribeToMarket]);\n\n  return { price, isBase: price === 1.0 };\n};\n\nexport const useEnrichedPools = (pools: PoolInfo[]) => {\n  const context = useContext(MarketsContext);\n  const { tokenMap } = useConnectionConfig();\n  const [enriched, setEnriched] = useState<any[]>([]);\n  const subscribeToMarket = context?.subscribeToMarket;\n  const marketEmitter = context?.marketEmitter;\n  const marketsByMint = context?.marketByMint;\n  const dailyVolume = context?.dailyVolume;\n\n  useEffect(() => {\n    if (!marketEmitter || !subscribeToMarket || !marketsByMint) {\n      return;\n    }\n\n    const mints = [...new Set([...marketsByMint?.keys()]).keys()];\n\n    const subscriptions = mints.map((m) => subscribeToMarket(m));\n\n    const update = () => {\n      setEnriched(\n        createEnrichedPools(pools, marketsByMint, dailyVolume, tokenMap)\n      );\n    };\n\n    const dispose = marketEmitter.onMarket(update);\n\n    update();\n\n    return () => {\n      dispose && dispose();\n      subscriptions.forEach((dispose) => dispose && dispose());\n    };\n  }, [\n    tokenMap,\n    pools,\n    dailyVolume,\n    subscribeToMarket,\n    marketEmitter,\n    marketsByMint,\n  ]);\n\n  return enriched;\n};\n\n// TODO:\n// 1. useEnrichedPools\n//      combines market and pools and user info\n// 2. ADD useMidPrice with event to refresh price\n// that could subscribe to multiple markets and trigger refresh of those markets only when there is active subscription\n\nfunction createEnrichedPools(\n  pools: PoolInfo[],\n  marketByMint: Map<string, SerumMarket> | undefined,\n  poolData: Map<string, RecentPoolData> | undefined,\n  tokenMap: KnownTokenMap\n) {\n  const TODAY = new Date();\n\n  if (!marketByMint) {\n    return [];\n  }\n\n  const result = pools\n    .filter((p) => p.pubkeys.holdingMints && p.pubkeys.holdingMints.length > 1)\n    .map((p, index) => {\n      const mints = (p.pubkeys.holdingMints || [])\n        .map((a) => a.toBase58())\n        .sort();\n      const mintA = cache.getMint(mints[0]);\n      const mintB = cache.getMint(mints[1]);\n\n      const account0 = cache.getAccount(p.pubkeys.holdingAccounts[0]);\n      const account1 = cache.getAccount(p.pubkeys.holdingAccounts[1]);\n      \n      const accountA =\n        account0?.info.mint.toBase58() === mints[0] ? account0 : account1;\n      const accountB =\n        account1?.info.mint.toBase58() === mints[1] ? account1 : account0;\n\n      const baseMid = getMidPrice(\n        marketByMint.get(mints[0])?.marketInfo.address.toBase58() || \"\",\n        mints[0]\n      );\n      const baseReserveUSD = baseMid * convert(accountA, mintA);\n\n      const quote = getMidPrice(\n        marketByMint.get(mints[1])?.marketInfo.address.toBase58() || \"\",\n        mints[1]\n      );\n      const quoteReserveUSD = quote * convert(accountB, mintB);\n\n      const poolMint = cache.getMint(p.pubkeys.mint);\n      if (poolMint?.supply.eqn(0)) {\n        return undefined;\n      }\n\n      let airdropYield = calculateAirdropYield(\n        p,\n        marketByMint,\n        baseReserveUSD,\n        quoteReserveUSD\n      );\n\n      let volume = 0;\n      let volume24h =\n        baseMid * (poolData?.get(p.pubkeys.mint.toBase58())?.volume24hA || 0);\n      let fees24h = volume24h * (LIQUIDITY_PROVIDER_FEE - SERUM_FEE);\n      let fees = 0;\n      let apy = airdropYield;\n      let apy24h = airdropYield;\n      if (p.pubkeys.feeAccount) {\n        const feeAccount = cache.getAccount(p.pubkeys.feeAccount);\n\n        if (\n          poolMint &&\n          feeAccount &&\n          feeAccount.info.mint.toBase58() === p.pubkeys.mint.toBase58()\n        ) {\n          const feeBalance = feeAccount?.info.amount.toNumber();\n          const supply = poolMint?.supply.toNumber();\n\n          const ownedPct = feeBalance / supply;\n\n          const poolOwnerFees =\n            ownedPct * baseReserveUSD + ownedPct * quoteReserveUSD;\n          volume = poolOwnerFees / 0.0004;\n          fees = volume * LIQUIDITY_PROVIDER_FEE;\n\n          if (fees !== 0) {\n            const baseVolume = (ownedPct * baseReserveUSD) / 0.0004;\n            const quoteVolume = (ownedPct * quoteReserveUSD) / 0.0004;\n\n            // Aproximation not true for all pools we need to fine a better way\n            const daysSinceInception = Math.floor(\n              (TODAY.getTime() - INITAL_LIQUIDITY_DATE.getTime()) /\n                (24 * 3600 * 1000)\n            );\n            const apy0 =\n              parseFloat(\n                ((baseVolume / daysSinceInception) *\n                  LIQUIDITY_PROVIDER_FEE *\n                  356) as any\n              ) / baseReserveUSD;\n            const apy1 =\n              parseFloat(\n                ((quoteVolume / daysSinceInception) *\n                  LIQUIDITY_PROVIDER_FEE *\n                  356) as any\n              ) / quoteReserveUSD;\n\n            apy = apy + Math.max(apy0, apy1);\n\n            const apy24h0 =\n              parseFloat((volume24h * LIQUIDITY_PROVIDER_FEE * 356) as any) /\n              baseReserveUSD;\n            apy24h = apy24h + apy24h0;\n          }\n        }\n      }\n\n      const lpMint = cache.getMint(p.pubkeys.mint);\n\n      const name = getPoolName(tokenMap, p);\n      const link = `#/?pair=${getPoolName(tokenMap, p, false).replace(\n        \"/\",\n        \"-\"\n      )}`;\n\n      return {\n        key: p.pubkeys.account.toBase58(),\n        id: index,\n        name,\n        names: mints.map((m) => getTokenName(tokenMap, m)),\n        accounts: [accountA?.pubkey, accountB?.pubkey],\n        address: p.pubkeys.mint.toBase58(),\n        link,\n        mints,\n        liquidityA: convert(accountA, mintA),\n        liquidityAinUsd: baseReserveUSD,\n        liquidityB: convert(accountB, mintB),\n        liquidityBinUsd: quoteReserveUSD,\n        supply:\n          lpMint &&\n          (\n            lpMint?.supply.toNumber() / Math.pow(10, lpMint?.decimals || 0)\n          ).toFixed(9),\n        fees,\n        fees24h,\n        liquidity: baseReserveUSD + quoteReserveUSD,\n        volume,\n        volume24h,\n        apy: Number.isFinite(apy) ? apy : 0,\n        apy24h: Number.isFinite(apy24h) ? apy24h : 0,\n        map: poolData,\n        extra: poolData?.get(p.pubkeys.account.toBase58()),\n        raw: p,\n      };\n    })\n    .filter((p) => p !== undefined);\n  return result;\n}\n\nfunction calculateAirdropYield(\n  p: PoolInfo,\n  marketByMint: Map<string, SerumMarket>,\n  baseReserveUSD: number,\n  quoteReserveUSD: number\n) {\n  let airdropYield = 0;\n  let poolWithAirdrop = POOLS_WITH_AIRDROP.find((drop) =>\n    drop.pool.equals(p.pubkeys.mint)\n  );\n  if (poolWithAirdrop) {\n    airdropYield = poolWithAirdrop.airdrops.reduce((acc, item) => {\n      const market = marketByMint.get(item.mint.toBase58())?.marketInfo.address;\n      if (market) {\n        const midPrice = getMidPrice(market?.toBase58(), item.mint.toBase58());\n\n        acc =\n          acc +\n          // airdrop yield\n          ((item.amount * midPrice) / (baseReserveUSD + quoteReserveUSD)) *\n            (365 / 30);\n      }\n\n      return acc;\n    }, 0);\n  }\n  return airdropYield;\n}\n\nconst OrderBookParser = (id: PublicKey, acc: AccountInfo<Buffer>) => {\n  const decoded = Orderbook.LAYOUT.decode(acc.data);\n\n  const details = {\n    pubkey: id,\n    account: {\n      ...acc,\n    },\n    info: decoded,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nconst getMidPrice = (marketAddress?: string, mintAddress?: string) => {\n  const SERUM_TOKEN = TOKEN_MINTS.find(\n    (a) => a.address.toBase58() === mintAddress\n  );\n\n  if (STABLE_COINS.has(SERUM_TOKEN?.name || \"\")) {\n    return 1.0;\n  }\n\n  if (!marketAddress) {\n    return 0.0;\n  }\n\n  const marketInfo = cache.get(marketAddress);\n  if (!marketInfo) {\n    return 0.0;\n  }\n\n  const decodedMarket = marketInfo.info;\n\n  const baseMintDecimals =\n    cache.get(decodedMarket.baseMint)?.info.decimals || 0;\n  const quoteMintDecimals =\n    cache.get(decodedMarket.quoteMint)?.info.decimals || 0;\n\n  const market = new Market(\n    decodedMarket,\n    baseMintDecimals,\n    quoteMintDecimals,\n    undefined,\n    decodedMarket.programId\n  );\n\n  const bids = cache.get(decodedMarket.bids)?.info;\n  const asks = cache.get(decodedMarket.asks)?.info;\n\n  if (bids && asks) {\n    const bidsBook = new Orderbook(market, bids.accountFlags, bids.slab);\n    const asksBook = new Orderbook(market, asks.accountFlags, asks.slab);\n\n    const bestBid = bidsBook.getL2(1);\n    const bestAsk = asksBook.getL2(1);\n\n    if (bestBid.length > 0 && bestAsk.length > 0) {\n      return (bestBid[0][0] + bestAsk[0][0]) / 2.0;\n    }\n  }\n\n  return 0;\n};\n\nconst refreshAccounts = async (connection: Connection, keys: string[]) => {\n  if (keys.length === 0) {\n    return [];\n  }\n\n  return getMultipleAccounts(connection, keys, \"single\").then(\n    ({ keys, array }) => {\n      return array.map((item, index) => {\n        if (!item) {\n          return undefined;\n        }\n\n        const address = keys[index];\n        return cache.add(new PublicKey(address), item);\n      }).filter(a => !!a);\n    }\n  );\n};\n\ninterface SerumMarket {\n  marketInfo: {\n    address: PublicKey;\n    name: string;\n    programId: PublicKey;\n    deprecated: boolean;\n  };\n\n  // 1st query\n  marketAccount?: AccountInfo<Buffer>;\n\n  // 2nd query\n  mintBase?: AccountInfo<Buffer>;\n  mintQuote?: AccountInfo<Buffer>;\n  bidAccount?: AccountInfo<Buffer>;\n  askAccount?: AccountInfo<Buffer>;\n  eventQueue?: AccountInfo<Buffer>;\n\n  swap?: {\n    dailyVolume: number;\n  };\n\n  midPrice?: (mint?: PublicKey) => number;\n}\n","import React from \"react\";\nimport { Button, Col, Popover, Row } from \"antd\";\nimport { PoolInfo } from \"../../models\";\nimport { CopyOutlined, InfoCircleOutlined } from \"@ant-design/icons\";\nimport { ExplorerLink } from \"./../explorerLink\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { getTokenName } from \"../../utils/utils\";\n\nconst Address = (props: {\n  address: string;\n  style?: React.CSSProperties;\n  label?: string;\n}) => {\n  return (\n    <Row style={{ width: \"100%\", ...props.style }}>\n      {props.label && <Col span={4}>{props.label}:</Col>}\n      <Col span={17}>\n        <ExplorerLink address={props.address} code={true} type=\"address\" />\n      </Col>\n      <Col span={3} style={{ display: \"flex\" }}>\n        <Button\n          shape=\"round\"\n          icon={<CopyOutlined />}\n          size={\"small\"}\n          style={{ marginLeft: \"auto\", marginRight: 0 }}\n          onClick={() => navigator.clipboard.writeText(props.address)}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport const PoolAddress = (props: {\n  pool?: PoolInfo;\n  style?: React.CSSProperties;\n  showLabel?: boolean;\n  label?: string;\n}) => {\n  const { pool } = props;\n  const label = props.label || \"Address\";\n\n  if (!pool?.pubkeys.account) {\n    return null;\n  }\n\n  return (\n    <Address\n      address={pool.pubkeys.account.toBase58()}\n      style={props.style}\n      label={label}\n    />\n  );\n};\n\nexport const AccountsAddress = (props: {\n  pool?: PoolInfo;\n  style?: React.CSSProperties;\n}) => {\n  const { tokenMap } = useConnectionConfig();\n  const { pool } = props;\n\n  if (!pool) {\n    return null;\n  }\n\n  const account1 = pool?.pubkeys.holdingAccounts[0];\n  const account2 = pool?.pubkeys.holdingAccounts[1];\n  const mint1 = pool?.pubkeys.holdingMints[0];\n  const mint2 = pool?.pubkeys.holdingMints[1];\n  let aName, bName;\n  if (mint1) {\n    aName = getTokenName(tokenMap, mint1.toBase58());\n  }\n  if (mint2) {\n    bName = getTokenName(tokenMap, mint2.toBase58());\n  }\n\n  return (\n    <>\n      {account1 && (\n        <Address\n          address={account1.toBase58()}\n          style={props.style}\n          label={aName}\n        />\n      )}\n      {account2 && (\n        <Address\n          address={account2.toBase58()}\n          style={props.style}\n          label={bName}\n        />\n      )}\n    </>\n  );\n};\n\nexport const AdressesPopover = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n\n  if (!pool) {\n    return null;\n  }\n\n  return (\n    <Popover\n      placement=\"topRight\"\n      title={\"Addresses\"}\n      trigger=\"hover\"\n      content={\n        <>\n          <PoolAddress pool={pool} showLabel={true} label={\"Pool\"} />\n          <AccountsAddress pool={pool} />\n        </>\n      }\n    >\n      <Button\n        shape=\"circle\"\n        size=\"large\"\n        type=\"text\"\n        className={\"trade-address-info-button\"}\n        icon={<InfoCircleOutlined />}\n      />\n    </Popover>\n  );\n};\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"./../../context/market\";\nimport echarts from \"echarts\";\nimport { formatNumber, formatUSD } from \"../../utils/utils\";\n\nexport const SupplyOverview = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n  const chartDiv = useRef<HTMLDivElement>(null);\n\n  // dispose chart\n  useEffect(() => {\n    const div = chartDiv.current;\n    return () => {\n      let instance = div && echarts.getInstanceByDom(div);\n      instance && instance.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!chartDiv.current || enriched.length === 0) {\n      return;\n    }\n\n    let instance = echarts.getInstanceByDom(chartDiv.current);\n    if (!instance) {\n      instance = echarts.init(chartDiv.current as any);\n    }\n\n    const data = [\n      {\n        name: enriched[0].names[0],\n        value: enriched[0].liquidityAinUsd,\n        tokens: enriched[0].liquidityA,\n      },\n      {\n        name: enriched[0].names[1],\n        value: enriched[0].liquidityBinUsd,\n        tokens: enriched[0].liquidityB,\n      },\n    ];\n\n    instance.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: function (params: any) {\n          var val = formatUSD.format(params.value);\n          var tokenAmount = formatNumber.format(params.data.tokens);\n          return `${params.name}: \\n${val}\\n(${tokenAmount})`;\n        },\n      },\n      series: [\n        {\n          name: \"Liquidity\",\n          type: \"pie\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          animation: false,\n          label: {\n            fontSize: 14,\n            show: true,\n            formatter: function (params: any) {\n              var val = formatUSD.format(params.value);\n              var tokenAmount = formatNumber.format(params.data.tokens);\n              return `{c|${params.name}}\\n{r|${tokenAmount}}\\n{r|${val}}`;\n            },\n            rich: {\n              c: {\n                color: \"#999\",\n                lineHeight: 22,\n                align: \"center\",\n              },\n              r: {\n                color: \"#999\",\n                align: \"right\",\n              },\n            },\n            color: \"rgba(255, 255, 255, 0.5)\",\n          },\n          itemStyle: {\n            normal: {\n              borderColor: \"#000\",\n            },\n          },\n          data,\n        },\n      ],\n    });\n  }, [enriched]);\n\n  if (enriched.length === 0) {\n    return null;\n  }\n\n  return <div ref={chartDiv} style={{ height: 150, width: \"100%\" }} />;\n};\n","import React from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport { convert, getPoolName, getTokenName, isKnownMint } from \"../../utils/utils\";\nimport {\n  useUserAccounts,\n  useCachedPool,\n  useAccountByMint,\n  cache,\n} from \"../../utils/accounts\";\nimport \"./styles.less\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { PoolIcon, TokenIcon } from \"../tokenIcon\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\n\nconst { Option } = Select;\n\nexport const TokenDisplay = (props: {\n  name: string;\n  mintAddress: string;\n  icon?: JSX.Element;\n  showBalance?: boolean;\n}) => {\n  const { showBalance, mintAddress, name, icon } = props;\n  const tokenMint = cache.getMint(mintAddress);\n  const tokenAccount = useAccountByMint(mintAddress);\n\n  let balance: number = 0;\n  let hasBalance: boolean = false;\n  if (showBalance) {\n    if (tokenAccount && tokenMint) {\n      balance = convert(tokenAccount, tokenMint);\n      hasBalance = balance > 0;\n    }\n  }\n\n  return (\n    <>\n      <div\n        title={mintAddress}\n        key={mintAddress}\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          {icon || <TokenIcon mintAddress={mintAddress} />}\n          {name}\n        </div>\n        {showBalance ? (\n          <span\n            title={balance.toString()}\n            key={mintAddress}\n            className=\"token-balance\"\n          >\n            &nbsp;{\" \"}\n            {hasBalance\n              ? balance < 0.001\n                ? \"<0.001\"\n                : balance.toFixed(3)\n              : \"-\"}\n          </span>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport const CurrencyInput = (props: {\n  mint?: string;\n  amount?: string;\n  title?: string;\n  hideSelect?: boolean;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n}) => {\n  const { userAccounts } = useUserAccounts();\n  const { pools } = useCachedPool();\n  const mint = cache.getMint(props.mint);\n\n  const { tokens, tokenMap } = useConnectionConfig();\n\n  const renderPopularTokens = tokens.map((item) => {\n    return (\n      <Option\n        key={item.address}\n        value={item.address}\n        name={item.symbol}\n        title={item.address}\n      >\n        <TokenDisplay\n          key={item.address}\n          name={item.symbol}\n          mintAddress={item.address}\n          showBalance={true}\n        />\n      </Option>\n    );\n  });\n\n  // TODO: expand nested pool names ...?\n\n  // group accounts by mint and use one with biggest balance\n  const grouppedUserAccounts = userAccounts\n    .sort((a, b) => {\n      return b.info.amount.gt(a.info.amount) ? 1 : -1;\n    })\n    .reduce((map, acc) => {\n      const mint = acc.info.mint.toBase58();\n      if (isKnownMint(tokenMap, mint)) {\n        return map;\n      }\n\n      const pool = pools.find((p) => p && p.pubkeys.mint.toBase58() === mint);\n\n      map.set(mint, (map.get(mint) || []).concat([{ account: acc, pool }]));\n\n      return map;\n    }, new Map<string, { account: TokenAccount; pool: PoolInfo | undefined }[]>());\n\n  const additionalAccounts = [...grouppedUserAccounts.keys()];\n  if (\n    tokens.findIndex((t) => t.address === props.mint) < 0 &&\n    props.mint &&\n    !grouppedUserAccounts.has(props?.mint)\n  ) {\n    additionalAccounts.push(props.mint);\n  }\n\n  const renderAdditionalTokens = additionalAccounts.map((mint) => {\n    let pool: PoolInfo | undefined;\n    const list = grouppedUserAccounts.get(mint);\n    if (list && list.length > 0) {\n      // TODO: group multple accounts of same time and select one with max amount\n      const account = list[0];\n      pool = account.pool;\n    }\n\n    let name: string;\n    let icon: JSX.Element;\n    if (pool) {\n      name = getPoolName(tokenMap, pool);\n      const sorted = pool.pubkeys.holdingMints\n        .map((a: PublicKey) => a.toBase58())\n        .sort();\n      icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n    } else {\n      name = getTokenName(tokenMap, mint, true, 3);\n      icon = <TokenIcon mintAddress={mint} />;\n    }\n\n    return (\n      <Option key={mint} value={mint} name={name}>\n        <TokenDisplay\n          key={mint}\n          mintAddress={mint}\n          name={name}\n          icon={icon}\n          showBalance={!pool}\n        />\n      </Option>\n    );\n  });\n\n  const userUiBalance = () => {\n    const currentAccount = userAccounts?.find(\n      (a) => a.info.mint.toBase58() === props.mint\n    );\n    if (currentAccount && mint) {\n      return convert(currentAccount, mint);\n    }\n\n    return 0;\n  };\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n\n        <div\n          className=\"ccy-input-header-right\"\n          onClick={(e) =>\n            props.onInputChange && props.onInputChange(userUiBalance())\n          }\n        >\n          Balance: {userUiBalance().toFixed(6)}\n        </div>\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          {!props.hideSelect ? (\n            <Select\n              size=\"large\"\n              showSearch\n              style={{ minWidth: 150 }}\n              placeholder=\"CCY\"\n              value={props.mint}\n              onChange={(item) => {\n                if (props.onMintChange) {\n                  props.onMintChange(item);\n                }\n              }}\n              filterOption={(input, option) =>\n                option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {[...renderPopularTokens, ...renderAdditionalTokens]}\n            </Select>\n          ) : (\n            props.mint && (\n              <TokenDisplay\n                key={props.mint}\n                name={getTokenName(tokenMap, props.mint)}\n                mintAddress={props.mint}\n                showBalance={true}\n              />\n            )\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport const PoolCurrencyInput = (props: {\n  mint: string;\n  amount?: string;\n  title?: string;\n  pool?: PoolInfo;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n  balance?: number;\n}) => {\n  const { balance, pool, mint } = props;\n  const { tokenMap } = useConnectionConfig();\n\n  let name: string;\n  let icon: JSX.Element;\n  if (pool) {\n    name = getPoolName(tokenMap, pool);\n    const sorted = pool.pubkeys.holdingMints\n      .map((a: PublicKey) => a.toBase58())\n      .sort();\n    icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n  } else {\n    name = getTokenName(tokenMap, mint, true, 3);\n    icon = <TokenIcon mintAddress={mint} />;\n  }\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n        {balance && (\n          <div\n            className=\"ccy-input-header-right\"\n            onClick={(e) => props.onInputChange && props.onInputChange(balance)}\n          >\n            Balance: {balance.toFixed(6)}\n          </div>\n        )}\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          <TokenDisplay key={mint} mintAddress={mint} name={name} icon={icon} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport \"./add.less\";\nimport { CurveType, DEFAULT_DENOMINATOR, PoolConfig } from \"../../models\";\nimport { ENABLE_FEES_INPUT } from \"./../../utils/ids\";\n\nconst Option = Select.Option;\n\nconst FeeInput = (props: {\n  numerator: number;\n  denominator: number;\n  set: (numerator: number, denominator: number) => void;\n}) => {\n  const [value, setValue] = useState(\n    ((props.numerator / props.denominator) * 100).toString()\n  );\n\n  return (\n    <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n      <NumericInput\n        className=\"slippage-input\"\n        size=\"small\"\n        value={value}\n        style={{\n          width: 50,\n          fontSize: 14,\n          boxShadow: \"none\",\n          borderColor: \"transparent\",\n          outline: \"transpaernt\",\n        }}\n        onChange={(x: any) => {\n          setValue(x);\n\n          const val = parseFloat(x);\n          if (Number.isFinite(val)) {\n            const numerator = (val * DEFAULT_DENOMINATOR) / 100;\n            props.set(numerator, DEFAULT_DENOMINATOR);\n          }\n        }}\n      />\n      %\n    </div>\n  );\n};\n\nconst PriceParameters = (props: {\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n}) => {\n  const [value, setValue] = useState(\"0\");\n  return (\n    <>\n      <>\n        <span>Token B constant price:</span>\n        <div\n          style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}\n        >\n          <NumericInput\n            className=\"slippage-input\"\n            size=\"small\"\n            value={value}\n            style={{\n              width: 50,\n              fontSize: 14,\n              boxShadow: \"none\",\n              borderColor: \"transparent\",\n              outline: \"transpaernt\",\n            }}\n            onChange={(x: any) => {\n              setValue(x);\n\n              props.setOptions({\n                ...props.options,\n                token_b_price: parseInt(x),\n              });\n            }}\n          />\n        </div>\n      </>\n    </>\n  );\n};\n\nexport const PoolConfigCard = (props: {\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n  action?: JSX.Element;\n}) => {\n  const {\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n  } = props.options.fees;\n\n  const feesInput = (\n    <>\n      <>\n        <span>LPs Trading Fee:</span>\n        <FeeInput\n          numerator={tradeFeeNumerator}\n          denominator={tradeFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                tradeFeeNumerator: numerator,\n                tradeFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n      <>\n        <span>Owner Trading Fee:</span>\n        <FeeInput\n          numerator={ownerTradeFeeNumerator}\n          denominator={ownerTradeFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                ownerTradeFeeNumerator: numerator,\n                ownerTradeFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n      <>\n        <span>Withdraw Fee:</span>\n        <FeeInput\n          numerator={ownerWithdrawFeeNumerator}\n          denominator={ownerWithdrawFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                ownerWithdrawFeeNumerator: numerator,\n                ownerWithdrawFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n    </>\n  );\n\n  return (\n    <Card title=\"Pool configuration\">\n      <div className=\"pool-settings-grid\">\n        {ENABLE_FEES_INPUT && feesInput}\n        <>\n          <span>Curve Type:</span>\n          <Select\n            defaultValue=\"0\"\n            style={{ width: 200 }}\n            onChange={(val) =>\n              props.setOptions({\n                ...props.options,\n                curveType: parseInt(val),\n              })\n            }\n          >\n            <Option value={CurveType.ConstantProduct.toString()}>\n              Constant Product\n            </Option>\n            <Option value={CurveType.ConstantPrice.toString()}>\n              Constant Price\n            </Option>\n            <Option value={CurveType.ConstantProductWithOffset.toString()}>\n              Offset Constant Product\n            </Option>\n          </Select>\n        </>\n        {props.options.curveType === CurveType.ConstantPrice && (\n          <PriceParameters {...props} />\n        )}\n      </div>\n      {props.action}\n    </Card>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  calculateDependentAmount,\n  usePoolForBasket,\n  PoolOperation,\n} from \"./pools\";\nimport { cache, useAccountByMint } from \"./accounts\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { useConnection, useConnectionConfig } from \"./connection\";\nimport {\n  CurveType,\n  PoolConfig,\n  TokenAccount,\n  DEFAULT_DENOMINATOR,\n} from \"../models\";\nimport { convert, getTokenIcon, getTokenName } from \"./utils\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport bs58 from \"bs58\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport interface CurrencyContextState {\n  mintAddress: string;\n  account?: TokenAccount;\n  mint?: MintInfo;\n  amount: string;\n  name: string;\n  icon?: string;\n  setAmount: (val: string) => void;\n  setMint: (mintAddress: string) => void;\n  convertAmount: () => number;\n  sufficientBalance: () => boolean;\n}\n\nexport interface CurrencyPairContextState {\n  A: CurrencyContextState;\n  B: CurrencyContextState;\n  lastTypedAccount: string;\n  setLastTypedAccount: (mintAddress: string) => void;\n  setPoolOperation: (swapDirection: PoolOperation) => void;\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n}\n\nconst CurrencyPairContext = React.createContext<CurrencyPairContextState | null>(\n  null\n);\n\nconst convertAmount = (amount: string, mint?: MintInfo) => {\n  return parseFloat(amount) * Math.pow(10, mint?.decimals || 0);\n};\n\nexport const useCurrencyLeg = (config: PoolConfig, defaultMint?: string) => {\n  const { tokenMap } = useConnectionConfig();\n  const [amount, setAmount] = useState(\"\");\n  const [mintAddress, setMintAddress] = useState(defaultMint || \"\");\n  const account = useAccountByMint(mintAddress);\n  const mint = cache.getMint(mintAddress);\n\n  return useMemo(\n    () => ({\n      mintAddress: mintAddress,\n      account: account,\n      mint: mint,\n      amount: amount,\n      name: getTokenName(tokenMap, mintAddress),\n      icon: getTokenIcon(tokenMap, mintAddress),\n      setAmount: setAmount,\n      setMint: setMintAddress,\n      convertAmount: () => convertAmount(amount, mint),\n      sufficientBalance: () =>\n        account !== undefined &&\n        (convert(account, mint) >= parseFloat(amount) ||\n          config.curveType === CurveType.ConstantProductWithOffset),\n    }),\n    [\n      mintAddress,\n      account,\n      mint,\n      amount,\n      tokenMap,\n      setAmount,\n      setMintAddress,\n      config,\n    ]\n  );\n};\n\nexport function CurrencyPairProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { tokens } = useConnectionConfig();\n\n  const history = useHistory();\n  const location = useLocation();\n  const [lastTypedAccount, setLastTypedAccount] = useState(\"\");\n  const [poolOperation, setPoolOperation] = useState<PoolOperation>(\n    PoolOperation.Add\n  );\n\n  const [options, setOptions] = useState<PoolConfig>({\n    curveType: CurveType.ConstantProduct,\n    fees: {\n      tradeFeeNumerator: 25,\n      tradeFeeDenominator: DEFAULT_DENOMINATOR,\n      ownerTradeFeeNumerator: 5,\n      ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n      ownerWithdrawFeeNumerator: 0,\n      ownerWithdrawFeeDenominator: 0,\n      hostFeeNumerator: 20,\n      hostFeeDenominator: 100,\n    },\n  });\n\n  const base = useCurrencyLeg(options);\n  const mintAddressA = base.mintAddress;\n  const setMintAddressA = base.setMint;\n  const amountA = base.amount;\n  const setAmountA = base.setAmount;\n\n  const quote = useCurrencyLeg(options);\n  const mintAddressB = quote.mintAddress;\n  const setMintAddressB = quote.setMint;\n  const amountB = quote.amount;\n  const setAmountB = quote.setAmount;\n\n  const pool = usePoolForBasket([base.mintAddress, quote.mintAddress]);\n\n  useEffect(() => {\n    const base =\n      tokens.find((t) => t.address === mintAddressA)?.symbol || mintAddressA;\n    const quote =\n      tokens.find((t) => t.address === mintAddressB)?.symbol || mintAddressB;\n\n    document.title = `Swap | Serum (${base}/${quote})`;\n  }, [mintAddressA, mintAddressB, tokens, location]);\n\n  // updates browser history on token changes\n  useEffect(() => {\n    // set history\n    const base =\n      tokens.find((t) => t.address === mintAddressA)?.symbol || mintAddressA;\n    const quote =\n      tokens.find((t) => t.address === mintAddressB)?.symbol || mintAddressB;\n\n    if (base && quote && location.pathname.indexOf(\"info\") < 0) {\n      history.push({\n        search: `?pair=${base}-${quote}`,\n      });\n    } else {\n      if (mintAddressA && mintAddressB) {\n        history.push({\n          search: ``,\n        });\n      } else {\n        return;\n      }\n    }\n  }, [mintAddressA, mintAddressB, tokens, history, location.pathname]);\n\n  // Updates tokens on location change\n  useEffect(() => {\n    if (!location.search && mintAddressA && mintAddressB) {\n      return;\n    }\n\n    let { defaultBase, defaultQuote } = getDefaultTokens(\n      tokens,\n      location.search\n    );\n    if (!defaultBase || !defaultQuote) {\n      return;\n    }\n\n    setMintAddressA(\n      tokens.find((t) => t.symbol === defaultBase)?.address ||\n        (isValidAddress(defaultBase) ? defaultBase : \"\") ||\n        \"\"\n    );\n    setMintAddressB(\n      tokens.find((t) => t.symbol === defaultQuote)?.address ||\n        (isValidAddress(defaultQuote) ? defaultQuote : \"\") ||\n        \"\"\n    );\n    // mintAddressA and mintAddressB are not included here to prevent infinite loop\n    // eslint-disable-next-line\n  }, [location, location.search, setMintAddressA, setMintAddressB, tokens]);\n\n  const calculateDependent = useCallback(async () => {\n    if (pool && mintAddressA && mintAddressB) {\n      let setDependent;\n      let amount;\n      let independent;\n      if (lastTypedAccount === mintAddressA) {\n        independent = mintAddressA;\n        setDependent = setAmountB;\n        amount = parseFloat(amountA);\n      } else {\n        independent = mintAddressB;\n        setDependent = setAmountA;\n        amount = parseFloat(amountB);\n      }\n\n      const result = await calculateDependentAmount(\n        connection,\n        independent,\n        amount,\n        pool,\n        poolOperation\n      );\n      if (typeof result === \"string\") {\n        setDependent(result);\n      } else if (result !== undefined && Number.isFinite(result)) {\n        setDependent(result.toFixed(6));\n      } else {\n        setDependent(\"\");\n      }\n    }\n  }, [\n    pool,\n    mintAddressA,\n    mintAddressB,\n    setAmountA,\n    setAmountB,\n    amountA,\n    amountB,\n    connection,\n    lastTypedAccount,\n    poolOperation,\n  ]);\n\n  useEffect(() => {\n    calculateDependent();\n  }, [amountB, amountA, lastTypedAccount, calculateDependent]);\n\n  return (\n    <CurrencyPairContext.Provider\n      value={{\n        A: base,\n        B: quote,\n        lastTypedAccount,\n        setLastTypedAccount,\n        setPoolOperation,\n        options,\n        setOptions,\n      }}\n    >\n      {children}\n    </CurrencyPairContext.Provider>\n  );\n}\n\nexport const useCurrencyPairState = () => {\n  const context = useContext(CurrencyPairContext);\n  return context as CurrencyPairContextState;\n};\n\nconst isValidAddress = (address: string) => {\n  try {\n    const decoded = bs58.decode(address);\n    return decoded.length === 32;\n  } catch {\n    return false;\n  }\n};\n\nfunction getDefaultTokens(tokens: TokenInfo[], search: string) {\n  let defaultBase = \"SOL\";\n  let defaultQuote = \"USDC\";\n\n  const nameToToken = tokens.reduce((map, item) => {\n    map.set(item.symbol, item);\n    return map;\n  }, new Map<string, any>());\n\n  if (search) {\n    const urlParams = new URLSearchParams(search);\n    const pair = urlParams.get(\"pair\");\n    if (pair) {\n      let items = pair.split(\"-\");\n\n      if (items.length > 1) {\n        if (nameToToken.has(items[0]) || isValidAddress(items[0])) {\n          defaultBase = items[0];\n        }\n\n        if (nameToToken.has(items[1]) || isValidAddress(items[1])) {\n          defaultQuote = items[1];\n        }\n      }\n    }\n  }\n  return {\n    defaultBase,\n    defaultQuote,\n  };\n}\n","import { CurrencyContextState } from \"../utils/currencyPair\";\nimport { getTokenName, KnownTokenMap, getPoolName } from \"../utils/utils\";\nimport { PoolInfo } from \"../models\";\n\nexport const CREATE_POOL_LABEL = \"Create Liquidity Pool\";\nexport const INSUFFICIENT_FUNDS_LABEL = (tokenName: string) =>\n  `Insufficient ${tokenName} funds`;\nexport const POOL_NOT_AVAILABLE = (tokenA: string, tokenB: string) =>\n  `Pool ${tokenA}/${tokenB} doesn't exsist`;\nexport const ADD_LIQUIDITY_LABEL = \"Provide Liquidity\";\nexport const SWAP_LABEL = \"Swap\";\nexport const CONNECT_LABEL = \"Connect Wallet\";\nexport const SELECT_TOKEN_LABEL = \"Select a token\";\nexport const ENTER_AMOUNT_LABEL = \"Enter an amount\";\nexport const REMOVE_LIQUIDITY_LABEL = \"Remove Liquidity\";\n\nexport const generateActionLabel = (\n  action: string,\n  connected: boolean,\n  tokenMap: KnownTokenMap,\n  A: CurrencyContextState,\n  B: CurrencyContextState,\n  ignoreToBalance: boolean = false\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !A.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !A.amount\n    ? ENTER_AMOUNT_LABEL\n    : !B.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !B.amount\n    ? ENTER_AMOUNT_LABEL\n    : !A.sufficientBalance()\n    ? INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, A.mintAddress))\n    : ignoreToBalance || B.sufficientBalance()\n    ? action\n    : INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, B.mintAddress));\n};\n\nexport const generateRemoveLabel = (\n  connected: boolean,\n  amount: number,\n  pool: PoolInfo,\n  tokenMap: KnownTokenMap,\n  hasSufficientBalance: boolean,\n  ignoreToBalance: boolean = false\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !amount\n    ? ENTER_AMOUNT_LABEL\n    : !hasSufficientBalance\n    ? INSUFFICIENT_FUNDS_LABEL(getPoolName(tokenMap, pool))\n    : REMOVE_LIQUIDITY_LABEL;\n};\n\nexport const generateExactOneLabel = (\n  connected: boolean,\n  tokenMap: KnownTokenMap,\n  token?: CurrencyContextState\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !token\n    ? SELECT_TOKEN_LABEL\n    : !parseFloat(token.amount || \"\")\n    ? ENTER_AMOUNT_LABEL\n    : !token.sufficientBalance()\n    ? INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, token.mintAddress))\n    : ADD_LIQUIDITY_LABEL;\n};\n","import React, { useMemo, useState } from \"react\";\nimport {\n  addLiquidity,\n  usePoolForBasket,\n  PoolOperation,\n} from \"../../utils/pools\";\nimport { Button, Card, Col, Dropdown, Popover, Radio, Row } from \"antd\";\nimport { useWallet } from \"../../context/wallet\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { CurveType, PoolInfo, TokenSwapLayout } from \"../../models\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport {\n  CREATE_POOL_LABEL,\n  ADD_LIQUIDITY_LABEL,\n  generateActionLabel,\n  generateExactOneLabel,\n} from \"../labels\";\nimport { AdressesPopover } from \"./address\";\nimport { formatPriceNumber, getPoolName } from \"../../utils/utils\";\nimport { useMint, useUserAccounts } from \"../../utils/accounts\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { AppBar } from \"../appBar\";\nimport { Settings } from \"../settings\";\nimport { programIds } from \"../../utils/ids\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const AddToLiquidity = () => {\n  const { wallet, connect, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [depositType, setDepositType] = useState(\"both\");\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n    options,\n    setOptions,\n  } = useCurrencyPairState();\n  const [depositToken, setDepositToken] = useState<string>(A.mintAddress);\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { tokenMap } = useConnectionConfig();\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n\n  const executeAction = !connected\n    ? connect\n    : async (instance?: PoolInfo) => {\n        const currentDepositToken = getDepositToken();\n        if (\n          isLatestLayout &&\n          depositType === \"one\" &&\n          currentDepositToken?.account &&\n          currentDepositToken.mint\n        ) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: currentDepositToken.account,\n              mintAddress: currentDepositToken.mintAddress,\n              amount: currentDepositToken.convertAmount(),\n            },\n          ];\n          addLiquidity(\n            connection,\n            wallet,\n            components,\n            slippage,\n            instance,\n            options,\n            depositType\n          )\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        } else if (A.account && B.account && A.mint && B.mint) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: A.account,\n              mintAddress: A.mintAddress,\n              amount: A.convertAmount(),\n            },\n            {\n              account: B.account,\n              mintAddress: B.mintAddress,\n              amount: B.convertAmount(),\n            },\n          ];\n\n          // use input from B as offset during pool init for curve with offset\n          if (\n            options.curveType === CurveType.ConstantProductWithOffset &&\n            !instance\n          ) {\n            options.token_b_offset = components[1].amount;\n            components[1].amount = 0;\n          }\n\n          addLiquidity(\n            connection,\n            wallet,\n            components,\n            slippage,\n            instance,\n            options\n          )\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        }\n      };\n\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n  const getDepositToken = () => {\n    if (!depositToken) {\n      return undefined;\n    }\n    return depositToken === A.mintAddress ? A : B;\n  };\n  const handleToggleDepositType = (item: any) => {\n    if (item === pool?.pubkeys.mint.toBase58()) {\n      setDepositType(\"both\");\n    } else if (item === A.mintAddress) {\n      if (depositType !== \"one\") {\n        setDepositType(\"one\");\n      }\n      setDepositToken(A.mintAddress);\n    } else if (item === B.mintAddress) {\n      if (depositType !== \"one\") {\n        setDepositType(\"one\");\n      }\n      setDepositToken(B.mintAddress);\n    }\n  };\n  const createPoolButton = pool && (\n    <Button\n      className=\"add-button\"\n      type=\"primary\"\n      size=\"large\"\n      onClick={() => executeAction()}\n      disabled={\n        connected &&\n        (pendingTx ||\n          !A.account ||\n          !B.account ||\n          A.account === B.account ||\n          !hasSufficientBalance)\n      }\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, tokenMap, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Button>\n  );\n\n  const addLiquidityButton = (\n    <Dropdown.Button\n      className=\"add-button\"\n      onClick={() => executeAction(pool)}\n      trigger={[\"click\"]}\n      // disabled={\n      //   connected &&\n      //   (depositType === \"both\"\n      //     ? pendingTx ||\n      //       !A.account ||\n      //       !B.account ||\n      //       A.account === B.account ||\n      //       !hasSufficientBalance\n      //     : !getDepositToken()?.account ||\n      //       !getDepositToken()?.sufficientBalance())\n      // }\n      disabled={true}\n      type=\"primary\"\n      size=\"large\"\n      overlay={\n        <PoolConfigCard\n          options={options}\n          setOptions={setOptions}\n          action={createPoolButton}\n        />\n      }\n    >\n      {/*{depositType === \"both\"*/}\n      {/*  ? generateActionLabel(*/}\n      {/*      pool ? ADD_LIQUIDITY_LABEL : CREATE_POOL_LABEL,*/}\n      {/*      connected,*/}\n      {/*      tokenMap,*/}\n      {/*      A,*/}\n      {/*      B*/}\n      {/*    )*/}\n      {/*  : generateExactOneLabel(connected, tokenMap, getDepositToken())}*/}\n      {/*{pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}*/}\n      Swap is being deprecated\n    </Dropdown.Button>\n  );\n\n  const getTokenOptions = () => {\n    let name: string = \"\";\n    let mint: string = \"\";\n    if (pool) {\n      name = getPoolName(tokenMap, pool);\n      mint = pool.pubkeys.mint.toBase58();\n    }\n    return (\n      <>\n        {pool && (\n          <Radio key={mint} value={mint} name={name}>\n            Add {name}\n          </Radio>\n        )}\n        {[A, B].map((item) => {\n          return (\n            <Radio\n              key={item.mintAddress}\n              value={item.mintAddress}\n              name={item.name}\n            >\n              Add {item.name}\n            </Radio>\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <>\n      <div className=\"input-card\">\n        <AdressesPopover pool={pool} />\n        <Popover\n          trigger=\"hover\"\n          content={\n            <div style={{ width: 300 }}>\n              Liquidity providers earn a fixed percentage fee on all trades\n              proportional to their share of the pool. Fees are added to the\n              pool, accrue in real time and can be claimed by withdrawing your\n              liquidity.\n            </div>\n          }\n        >\n          <Button type=\"text\">Read more about providing liquidity.</Button>\n        </Popover>\n        {isLatestLayout && pool && (\n          <div className=\"flex-row-center\">\n            <Radio.Group\n              style={{ margin: \"10px 0\" }}\n              onChange={(item) => handleToggleDepositType(item.target.value)}\n              value={\n                depositType === \"both\"\n                  ? pool?.pubkeys.mint.toBase58()\n                  : getDepositToken()?.mintAddress\n              }\n            >\n              {getTokenOptions()}\n            </Radio.Group>\n          </div>\n        )}\n        {depositType === \"both\" && (\n          <>\n            <CurrencyInput\n              title=\"Input\"\n              onInputChange={(val: any) => {\n                setPoolOperation(PoolOperation.Add);\n                if (A.amount !== val) {\n                  setLastTypedAccount(A.mintAddress);\n                }\n                A.setAmount(val);\n              }}\n              amount={A.amount}\n              mint={A.mintAddress}\n              onMintChange={(item) => {\n                A.setMint(item);\n              }}\n            />\n            <div>+</div>\n            <CurrencyInput\n              title={\n                options.curveType === CurveType.ConstantProductWithOffset\n                  ? \"Offset\"\n                  : \"Input\"\n              }\n              onInputChange={(val: any) => {\n                setPoolOperation(PoolOperation.Add);\n                if (B.amount !== val) {\n                  setLastTypedAccount(B.mintAddress);\n                }\n                B.setAmount(val);\n              }}\n              amount={B.amount}\n              mint={B.mintAddress}\n              onMintChange={(item) => {\n                B.setMint(item);\n              }}\n            />\n          </>\n        )}\n        {depositType === \"one\" && depositToken && (\n          <CurrencyInput\n            title=\"Input\"\n            onInputChange={(val: any) => {\n              setPoolOperation(PoolOperation.Add);\n              const dToken = getDepositToken();\n              if (dToken && dToken.amount !== val) {\n                setLastTypedAccount(dToken.mintAddress);\n              }\n              getDepositToken()?.setAmount(val);\n            }}\n            amount={getDepositToken()?.amount}\n            mint={getDepositToken()?.mintAddress}\n            hideSelect={true}\n          />\n        )}\n        {addLiquidityButton}\n        {pool && <PoolPrice pool={pool} />}\n        <SupplyOverview pool={pool} />\n      </div>\n\n      <YourPosition pool={pool} />\n    </>\n  );\n};\n\nexport const PoolPrice = (props: { pool: PoolInfo }) => {\n  const pool = props.pool;\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n  const enriched = useEnrichedPools(pools)[0];\n\n  const { userAccounts } = useUserAccounts();\n  const lpMint = useMint(pool.pubkeys.mint);\n\n  const ratio =\n    userAccounts\n      .filter((f) => pool.pubkeys.mint.equals(f.info.mint))\n      .reduce((acc, item) => item.info.amount.toNumber() + acc, 0) /\n    (lpMint?.supply.toNumber() || 0);\n\n  if (!enriched) {\n    return null;\n  }\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20, width: \"100%\" }}\n      bodyStyle={{ padding: \"7px\" }}\n      size=\"small\"\n      title=\"Prices and pool share\"\n    >\n      <Row style={{ width: \"100%\" }}>\n        <Col span={8}>\n          {formatPriceNumber.format(\n            parseFloat(enriched.liquidityA) / parseFloat(enriched.liquidityB)\n          )}\n        </Col>\n        <Col span={8}>\n          {formatPriceNumber.format(\n            parseFloat(enriched.liquidityB) / parseFloat(enriched.liquidityA)\n          )}\n        </Col>\n        <Col span={8}>\n          {ratio * 100 < 0.001 && ratio > 0 ? \"<\" : \"\"}\n          &nbsp;{formatPriceNumber.format(ratio * 100)}%\n        </Col>\n      </Row>\n      <Row style={{ width: \"100%\" }}>\n        <Col span={8}>\n          {enriched.names[0]} per {enriched.names[1]}\n        </Col>\n        <Col span={8}>\n          {enriched.names[1]} per {enriched.names[0]}\n        </Col>\n        <Col span={8}>Share of pool</Col>\n      </Row>\n    </Card>\n  );\n};\n\nexport const YourPosition = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n  const enriched = useEnrichedPools(pools)[0];\n  const { userAccounts } = useUserAccounts();\n  const lpMint = useMint(pool?.pubkeys.mint);\n\n  if (!pool || !enriched) {\n    return null;\n  }\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n\n  const ratio =\n    userAccounts\n      .filter((f) => pool.pubkeys.mint.equals(f.info.mint))\n      .reduce((acc, item) => item.info.amount.toNumber() + acc, 0) /\n    (lpMint?.supply.toNumber() || 0);\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20, width: \"100%\" }}\n      bodyStyle={{ padding: \"7px\" }}\n      size=\"small\"\n      title=\"Your Position\"\n    >\n      <div className=\"pool-card\" style={{ width: \"initial\" }}>\n        <div className=\"pool-card-row\">\n          <div className=\"pool-card-cell\">\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <PoolIcon mintA={baseMintAddress} mintB={quoteMintAddress} />\n              <h3 style={{ margin: 0 }}>{enriched?.name}</h3>\n            </div>\n          </div>\n          <div className=\"pool-card-cell\">\n            <h3 style={{ margin: 0 }}>\n              {formatPriceNumber.format(ratio * enriched.supply)}\n            </h3>\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">Your Share:</div>\n          <div className=\"pool-card-cell\">\n            {ratio * 100 < 0.001 && ratio > 0 ? \"<\" : \"\"}\n            {formatPriceNumber.format(ratio * 100)}%\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">{enriched.names[0]}:</div>\n          <div className=\"pool-card-cell\">\n            {formatPriceNumber.format(ratio * enriched.liquidityA)}\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">{enriched.names[1]}:</div>\n          <div className=\"pool-card-cell\">\n            {formatPriceNumber.format(ratio * enriched.liquidityB)}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport const AddToLiquidityView = () => {\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n      >\n        <AddToLiquidity />\n      </Card>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Card, Col, Radio, Row, Slider, Spin, Typography } from \"antd\";\n\nimport { removeLiquidity, removeExactOneLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../context/wallet\";\nimport { useConnection, useConnectionConfig } from \"../../utils/connection\";\nimport { PoolInfo, TokenAccount, TokenSwapLayout } from \"../../models\";\nimport { notify } from \"../../utils/notifications\";\nimport { TokenIcon } from \"../tokenIcon\";\nimport { YourPosition } from \"./add\";\nimport { useMint } from \"../../utils/accounts\";\nimport {\n  formatPriceNumber,\n  getPoolName,\n  getTokenName,\n} from \"../../utils/utils\";\nimport { PoolCurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { generateRemoveLabel } from \"../labels\";\nimport { programIds } from \"../../utils/ids\";\n\nexport const RemoveLiquidity = (props: {\n  instance: { account: TokenAccount; pool: PoolInfo };\n  removeRatio: number;\n  withdrawType: string;\n  amount: number;\n  withdrawToken: string;\n}) => {\n  const { account, pool } = props.instance;\n  const { removeRatio, withdrawType, amount, withdrawToken } = props;\n  const [pendingTx, setPendingTx] = useState(false);\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const { tokenMap } = useConnectionConfig();\n  const mint = useMint(withdrawToken);\n\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n\n  let liquidityAmount: number = removeRatio * account.info.amount.toNumber();\n  const hasSufficientBalance =\n    liquidityAmount <= account.info.amount.toNumber();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true);\n      if (withdrawType === \"one\" && isLatestLayout) {\n        const tokenAmount = amount * Math.pow(10, mint?.decimals || 0);\n        await removeExactOneLiquidity(\n          connection,\n          wallet,\n          account,\n          liquidityAmount,\n          tokenAmount,\n          withdrawToken,\n          pool\n        );\n      } else {\n        await removeLiquidity(\n          connection,\n          wallet,\n          liquidityAmount,\n          account,\n          pool\n        );\n      }\n    } catch {\n      notify({\n        description:\n          \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\",\n      });\n    } finally {\n      setPendingTx(false);\n      // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return (\n    <Button\n      className=\"add-button\"\n      type=\"primary\"\n      size=\"large\"\n      onClick={onRemove}\n      disabled={\n        connected &&\n        (pendingTx || !hasSufficientBalance || !account || !liquidityAmount)\n      }\n    >\n      {generateRemoveLabel(\n        connected,\n        liquidityAmount,\n        pool,\n        tokenMap,\n        hasSufficientBalance\n      )}\n      {pendingTx && (\n        <Spin\n          indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />}\n          className=\"add-spinner\"\n        />\n      )}\n    </Button>\n  );\n};\n\nexport const RemoveLiquidityEntry = (props: {\n  instance: { account?: TokenAccount; pool: PoolInfo };\n  enriched: any;\n}) => {\n  const { account, pool } = props.instance;\n  const { enriched } = props;\n  const [inputType, setInputType] = useState(\"slider\");\n  const { tokenMap } = useConnectionConfig();\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n  const lpMint = useMint(pool?.pubkeys.mint);\n\n  const [withdrawType, setWithdrawType] = useState(\"both\");\n  const [withdrawToken, setWithdrawToken] = useState<string>(\n    pool?.pubkeys.mint.toBase58()\n  );\n\n  const ratio =\n    (account?.info.amount.toNumber() || 0) / (lpMint?.supply.toNumber() || 1);\n\n  const baseMintAddress = enriched.mints[0];\n  const quoteMintAddress = enriched.mints[1];\n\n  const [inputInfo, setInputInfo] = useState({\n    amount: \"initial\",\n    lastTyped: \"pool\",\n    liquidityPercentage: 100,\n  });\n\n  const [inputsDescription, setInputsDescription] = useState({\n    pool: \"Input\",\n    poolAmount: formatPriceNumber.format(\n      ratio * (enriched?.supply || 0) * (inputInfo.liquidityPercentage / 100)\n    ),\n    tokenA: \"Output (estimated)\",\n    tokenAAmount: formatPriceNumber.format(\n      ratio *\n        (enriched?.liquidityA || 0) *\n        (inputInfo.liquidityPercentage / 100)\n    ),\n    tokenB: \"Output (estimated)\",\n    tokenBAmount: formatPriceNumber.format(\n      ratio *\n        (enriched?.liquidityB || 0) *\n        (inputInfo.liquidityPercentage / 100)\n    ),\n  });\n\n  useEffect(() => {\n    switch (inputInfo.lastTyped) {\n      case \"pool\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount:\n            inputInfo.amount !== \"initial\"\n              ? inputInfo.amount\n              : formatPriceNumber.format(\n                  ratio *\n                    (enriched?.supply || 0) *\n                    (inputInfo.liquidityPercentage / 100)\n                ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n      case \"tokenA\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: inputInfo.amount,\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n      case \"tokenB\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: inputInfo.amount,\n        });\n        break;\n      }\n      case \"slider\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n    }\n  }, [inputInfo, enriched, ratio, inputInfo.liquidityPercentage, withdrawType]);\n\n  useEffect(() => {\n    if (withdrawType === \"one\") {\n      if (\n        withdrawToken === baseMintAddress &&\n        inputInfo.amount !== inputsDescription.tokenAAmount\n      ) {\n        setInputInfo({\n          ...inputInfo,\n          lastTyped: \"tokenA\",\n          amount: inputsDescription.tokenAAmount,\n        });\n      } else if (\n        withdrawToken === quoteMintAddress &&\n        inputInfo.amount !== inputsDescription.tokenBAmount\n      ) {\n        setInputInfo({\n          ...inputInfo,\n          lastTyped: \"tokenB\",\n          amount: inputsDescription.tokenBAmount,\n        });\n      }\n    }\n    // Only needed to change with specific states\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawToken, withdrawType, baseMintAddress, quoteMintAddress]);\n\n  if (!pool || !enriched) {\n    return null;\n  }\n\n  const handleInputChange = (val: any, inputSource: string) => {\n    switch (inputSource) {\n      case \"pool\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.supply * ratio),\n          amount: val,\n          lastTyped: \"pool\",\n        });\n        break;\n      }\n      case \"tokenA\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.liquidityA * ratio),\n          amount: val,\n          lastTyped: \"tokenA\",\n        });\n        break;\n      }\n      case \"tokenB\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.liquidityB * ratio),\n          amount: val,\n          lastTyped: \"tokenB\",\n        });\n        break;\n      }\n      case \"slider\": {\n        setInputInfo({\n          ...inputInfo,\n          liquidityPercentage: val,\n          lastTyped: \"slider\",\n        });\n        break;\n      }\n    }\n  };\n\n  const getTokenOptions = () => {\n    if (pool) {\n      const name = getPoolName(tokenMap, pool);\n      const mint = pool.pubkeys.mint.toBase58();\n      return (\n        <>\n          <Radio key={mint} value={mint} name={name}>\n            {name}\n          </Radio>\n          {pool.pubkeys.holdingMints.map((mint) => {\n            const mintAddress = mint.toBase58();\n            const tokenName = getTokenName(tokenMap, mintAddress);\n            return (\n              <Radio key={mintAddress} value={mintAddress} name={tokenName}>\n                {tokenName}\n              </Radio>\n            );\n          })}\n        </>\n      );\n    }\n    return null;\n  };\n\n  const handleToggleWithdrawType = (item: any) => {\n    if (item === pool?.pubkeys.mint.toBase58()) {\n      setWithdrawType(\"both\");\n      setWithdrawToken(pool?.pubkeys.mint.toBase58());\n    } else if (item === enriched.mints[0]) {\n      if (withdrawType !== \"one\") {\n        setWithdrawType(\"one\");\n      }\n      setWithdrawToken(enriched.mints[0]);\n    } else if (item === enriched.mints[1]) {\n      if (withdrawType !== \"one\") {\n        setWithdrawType(\"one\");\n      }\n      setWithdrawToken(enriched.mints[1]);\n    }\n  };\n  return (\n    <>\n      {inputType === \"slider\" && (\n        <div className=\"input-card\">\n          Remove Liquidity\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">Amount</div>\n                <div className=\"pool-card-cell\">\n                  <Button onClick={() => setInputType(\"input\")}>\n                    Detailed\n                  </Button>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  <Typography.Text style={{ fontSize: \"42px\" }}>\n                    {formatPriceNumber.format(inputInfo.liquidityPercentage)}%\n                  </Typography.Text>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <Slider\n                  style={{ width: \"100%\" }}\n                  value={inputInfo.liquidityPercentage}\n                  tipFormatter={(amount?: number) => `${amount}%`}\n                  min={0}\n                  max={100}\n                  onChange={(amount: number) =>\n                    setInputInfo({\n                      ...inputInfo,\n                      liquidityPercentage: amount,\n                      lastTyped: \"slider\",\n                    })\n                  }\n                />\n              </div>\n              <Row>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 25,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    25%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 50,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    50%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 75,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    75%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 100,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    100%\n                  </Button>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n          ↓\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  {formatPriceNumber.format(\n                    ratio *\n                      enriched.liquidityA *\n                      (inputInfo.liquidityPercentage / 100)\n                  )}\n                </div>\n                <div className=\"pool-card-cell\">\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <TokenIcon mintAddress={baseMintAddress} />\n                    <h3 style={{ margin: 0 }}>{enriched?.names[0]}</h3>\n                  </div>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  {formatPriceNumber.format(\n                    ratio *\n                      enriched.liquidityB *\n                      (inputInfo.liquidityPercentage / 100)\n                  )}\n                </div>\n                <div className=\"pool-card-cell\">\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <TokenIcon mintAddress={quoteMintAddress} />\n                    <h3 style={{ margin: 0 }}>{enriched.names[1]}</h3>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n      {inputType === \"input\" && (\n        <div className=\"input-card\">\n          Remove Liquidity\n          {isLatestLayout && pool && (\n            <div className=\"flex-row-center\">\n              <Radio.Group\n                style={{ margin: \"10px 0\" }}\n                onChange={(item) => handleToggleWithdrawType(item.target.value)}\n                value={\n                  withdrawType === \"both\"\n                    ? pool?.pubkeys.mint.toBase58()\n                    : withdrawToken\n                }\n              >\n                {getTokenOptions()}\n              </Radio.Group>\n            </div>\n          )}\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">Amount Estimated</div>\n                <div className=\"pool-card-cell\">\n                  <Button onClick={() => setInputType(\"slider\")}>Simple</Button>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  <Typography.Text style={{ fontSize: \"42px\" }}>\n                    {formatPriceNumber.format(inputInfo.liquidityPercentage)}%\n                  </Typography.Text>\n                </div>\n              </div>\n            </div>\n            <div className=\"pool-card-row\">\n              <Slider\n                style={{ width: \"100%\" }}\n                value={inputInfo.liquidityPercentage}\n                tipFormatter={(amount?: number) => `${amount}%`}\n                min={0}\n                max={100}\n                onChange={(amount: number) =>\n                  handleInputChange(amount, \"slider\")\n                }\n              />\n            </div>\n            <Row>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(25, \"slider\")}>\n                  25%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(50, \"slider\")}>\n                  50%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(75, \"slider\")}>\n                  75%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(100, \"slider\")}>\n                  100%\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n          <PoolCurrencyInput\n            mint={pool.pubkeys.mint.toBase58()}\n            pool={pool}\n            title={inputsDescription.pool}\n            amount={inputsDescription.poolAmount}\n            onInputChange={(val: any) => {\n              handleInputChange(val, \"pool\");\n            }}\n          />\n          ↓\n          {(withdrawType === \"both\" || withdrawToken === baseMintAddress) && (\n            <PoolCurrencyInput\n              mint={baseMintAddress}\n              title={inputsDescription.tokenA}\n              amount={inputsDescription.tokenAAmount}\n              onInputChange={(val: any) => {\n                handleInputChange(val, \"tokenA\");\n              }}\n            />\n          )}\n          {withdrawType === \"both\" && \"+\"}\n          {(withdrawType === \"both\" || withdrawToken === quoteMintAddress) && (\n            <PoolCurrencyInput\n              mint={quoteMintAddress}\n              title={inputsDescription.tokenB}\n              amount={inputsDescription.tokenBAmount}\n              onInputChange={(val: any) => {\n                handleInputChange(val, \"tokenB\");\n              }}\n            />\n          )}\n        </div>\n      )}\n      {account && (\n        <RemoveLiquidity\n          instance={{ pool: pool, account: account }}\n          removeRatio={inputInfo.liquidityPercentage / 100}\n          withdrawType={withdrawType}\n          amount={\n            withdrawToken === baseMintAddress\n              ? parseFloat(inputsDescription.tokenAAmount)\n              : parseFloat(inputsDescription.tokenBAmount)\n          }\n          withdrawToken={withdrawToken}\n        />\n      )}\n      <YourPosition pool={pool} />\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Card, Spin, Typography } from \"antd\";\nimport \"./styles.less\";\nimport echarts from \"echarts\";\nimport { PoolInfo } from \"../../models\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { formatShortDate, getPoolName } from \"../../utils/utils\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { BONFIDA_POOL_INTERVAL } from \"../../context/market\";\n\nexport const VOLUME_API = \"https://serum-api.bonfida.com/pools/volumes\";\nexport const LIQUIDITY_API = \"https://serum-api.bonfida.com/pools/liquidity\";\n\nconst API_ENDPOINTS: EndpointOptions = {\n  volume: VOLUME_API,\n  liquidity: LIQUIDITY_API,\n};\ntype EndpointOptions = {\n  [key: string]: string;\n};\ninterface VolumeData {\n  volume: number;\n  time: number;\n}\n\ninterface LiquidityData {\n  liquidityAinUsd: number;\n  liquidityBinUsd: number;\n  time: number;\n}\n\nexport const PoolLineChart = React.memo(\n  (props: {\n    pool?: PoolInfo;\n    limit?: number;\n    api: string;\n    chartName: string;\n    current?: string;\n    type?: string;\n    getComputedData: (item: any) => Array<number>;\n    getComputedTime: (item: any) => Array<string>;\n  }) => {\n    const { pool, api, limit, chartName, current } = props;\n    const chartDiv = useRef<HTMLDivElement>(null);\n    const echartsRef = useRef<any>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    let apiFilter: string = \"\";\n    let apiUrl: string = \"\";\n    const bonfidaTimer = useRef<number>(0);\n    if (pool) {\n      const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n      const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n      apiFilter = `?mintA=${baseMintAddress}&mintB=${quoteMintAddress}`;\n    }\n    apiUrl = API_ENDPOINTS[api];\n\n    const bonfidaDataChartQuery = useCallback(async () => {\n      try {\n        const resp = await window.fetch(`${apiUrl}${apiFilter}`);\n        const data = await resp.json();\n        let finalData = data?.data || [];\n        if (limit && finalData) {\n          finalData = finalData.slice(0, limit);\n        }\n        updateChart(finalData);\n      } catch {\n        // ignore\n      }\n      bonfidaTimer.current = window.setTimeout(\n        () => bonfidaDataChartQuery(),\n        BONFIDA_POOL_INTERVAL\n      );\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // needs to only be called on mount an unmount\n\n    const updateChart = (data: any) => {\n      setLoading(false);\n      if (echartsRef.current) {\n        echartsRef.current.setOption({\n          textStyle: {\n            color: \"#fff\",\n          },\n          tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n              type: \"shadow\",\n            },\n          },\n          grid: {\n            containLabel: true,\n            left: 0,\n            right: 0,\n          },\n          xAxis: [\n            {\n              inverse: true,\n              type: \"category\",\n              data: props.getComputedTime(data),\n            },\n          ],\n          yAxis: [\n            {\n              type: \"value\",\n              scale: true,\n              splitLine: false,\n            },\n          ],\n          series: [\n            {\n              type: `${props.type || \"line\"}`,\n              data: props.getComputedData(data),\n            },\n          ],\n        });\n      }\n    };\n    useEffect(() => {\n      if (chartDiv.current) {\n        echartsRef.current = echarts.init(chartDiv.current);\n      }\n      bonfidaDataChartQuery();\n      return () => {\n        echartsRef.current.dispose();\n        window.clearTimeout(bonfidaTimer.current);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // needs to only be called on mount an unmount\n    return (\n      <>\n        {loading && <Spin tip=\"Loading...\" />}\n        {!loading && (\n          <Typography.Title level={4}>\n            {chartName} {current || \"\"}\n          </Typography.Title>\n        )}\n        <div ref={chartDiv} style={{ height: \"250px\", width: \"100%\" }} />\n      </>\n    );\n  }\n);\n\nexport const HistoricalVolume = React.memo(\n  (props: { pool?: PoolInfo; current?: string }) => {\n    const getComputedData = (data: VolumeData[]) => {\n      return data.map((d) => d.volume);\n    };\n    const getComputedTime = (data: VolumeData[]) => {\n      return data.map((d: any) => formatShortDate.format(new Date(d.time)));\n    };\n    let name: string = \"Volume\";\n    if (props.current) {\n      name = \"Volume (24H)\";\n    }\n    return (\n      <PoolLineChart\n        pool={props.pool}\n        limit={props.pool ? 7 : 0}\n        api=\"volume\"\n        type=\"bar\"\n        chartName={name}\n        current={props.current}\n        getComputedData={getComputedData}\n        getComputedTime={getComputedTime}\n      />\n    );\n  }\n);\n\ntype GrupedData = {\n  [key: number]: number;\n};\n\nexport const HistoricalLiquidity = React.memo(\n  (props: { pool?: PoolInfo; current?: string }) => {\n    const groupByTime = (data: LiquidityData[]) => {\n      const groupedData: GrupedData = {};\n      for (const d of data) {\n        if (!groupedData[d.time]) {\n          groupedData[d.time] = 0;\n        }\n        groupedData[d.time] =\n          groupedData[d.time] + d.liquidityAinUsd + d.liquidityBinUsd;\n      }\n      return groupedData;\n    };\n    const getComputedData = (data: LiquidityData[]) => {\n      const groupedData = groupByTime(data);\n      return Object.values(groupedData);\n    };\n    const getComputedTime = (data: LiquidityData[]) => {\n      const groupedData = groupByTime(data);\n      return Object.keys(groupedData).map((key) =>\n        formatShortDate.format(new Date(parseInt(key)))\n      );\n    };\n    let name: string = \"Liquidity\";\n    if (props.current) {\n      name = \"Total Liquidity\";\n    }\n    return (\n      <PoolLineChart\n        pool={props.pool}\n        limit={props.pool ? 7 : 0}\n        api=\"liquidity\"\n        type=\"line\"\n        chartName={name}\n        current={props.current}\n        getComputedData={getComputedData}\n        getComputedTime={getComputedTime}\n      />\n    );\n  }\n);\n\nexport const HistoricalPoolData = React.memo((props: { pool: PoolInfo }) => {\n  const { tokenMap } = useConnectionConfig();\n  const pool = props.pool;\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n  const name = getPoolName(tokenMap, pool);\n  return (\n    <Card\n      className=\"pool-card\"\n      title={\n        <>\n          <PoolIcon\n            mintA={baseMintAddress}\n            mintB={quoteMintAddress}\n            className=\"left-icon\"\n          />\n          {name}\n        </>\n      }\n    >\n      <HistoricalLiquidity pool={pool} />\n      <HistoricalVolume pool={pool} />\n    </Card>\n  );\n});\n","import React, { useMemo, useState } from \"react\";\nimport { Button, Card, Popover, Typography } from \"antd\";\nimport { RemoveLiquidityEntry } from \"./remove\";\nimport { useMint, useUserAccounts } from \"../../utils/accounts\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport \"./view.less\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { formatNumber, formatPct, formatUSD } from \"../../utils/utils\";\nimport { ExplorerLink } from \"../explorerLink\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { HistoricalLiquidity, HistoricalVolume } from \"../charts/historical\";\nimport { LineChartOutlined, AlignLeftOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\nexport const PoolCard = (props: { pool: PoolInfo; account?: TokenAccount }) => {\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n\n  const [displayMode, setDisplayMode] = useState(\"card\");\n\n  const enriched = useEnrichedPools(pools)[0];\n  const { userAccounts } = useUserAccounts();\n\n  const pool = props.pool;\n  const account = props.account;\n\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n  const lpMint = useMint(pool.pubkeys.mint);\n\n  const ratio =\n    (account?.info.amount.toNumber() || 0) / (lpMint?.supply.toNumber() || 0);\n\n  if (!enriched) {\n    return null;\n  }\n\n  const handleSwitchChartMode = () => {\n    if (displayMode === \"card\") {\n      setDisplayMode(\"chart\");\n    } else {\n      setDisplayMode(\"card\");\n    }\n  };\n  const handleSwitchViewMode = () => {\n    if (displayMode === \"card\") {\n      setDisplayMode(\"remove\");\n    } else {\n      setDisplayMode(\"card\");\n    }\n  };\n  const small: React.CSSProperties = { fontSize: 11 };\n\n  const userInfo = userAccounts.length > 0 && (\n    <>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your liquidity:\n        </Text>\n        <div className=\"pool-card-cell \">\n          <div className=\"left\">\n            <div>{formatUSD.format(ratio * enriched.liquidity)}</div>\n            <div>\n              <Text type=\"secondary\" style={small}>\n                {formatNumber.format(ratio * enriched.liquidityA)}{\" \"}\n                {enriched.names[0]}\n              </Text>\n            </div>\n            <div>\n              <Text type=\"secondary\" style={small}>\n                {formatNumber.format(ratio * enriched.liquidityB)}{\" \"}\n                {enriched.names[1]}\n              </Text>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your quantity:\n        </Text>\n        <div className=\"pool-card-cell \">{ratio * enriched.supply}</div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your fees (24h):\n        </Text>\n        <div className=\"pool-card-cell \" title={`${enriched.fees24h * ratio}`}>\n          {enriched.fees24h * ratio < 0.005 ? \"< \" : \"\"}\n          {formatUSD.format(enriched.fees24h * ratio)}\n        </div>\n      </div>\n\n      <hr />\n    </>\n  );\n\n  return (\n    <Card\n      className=\"pool-card\"\n      title={\n        <>\n          <PoolIcon\n            mintA={baseMintAddress}\n            mintB={quoteMintAddress}\n            className=\"left-icon\"\n          />\n          {enriched?.name}\n          <Popover\n            placement=\"topRight\"\n            trigger=\"hover\"\n            className=\"right-icon\"\n            content={`Show ${\n              displayMode === \"card\" ? \"historical\" : \"current\"\n            } data`}\n          >\n            {displayMode === \"remove\" ? (\n              <Button\n                shape=\"circle\"\n                size=\"middle\"\n                type=\"text\"\n                icon={<AlignLeftOutlined />}\n                onClick={() => setDisplayMode(\"card\")}\n              />\n            ) : (\n              <Button\n                shape=\"circle\"\n                size=\"middle\"\n                type=\"text\"\n                icon={\n                  displayMode === \"card\" ? (\n                    <LineChartOutlined />\n                  ) : (\n                    <AlignLeftOutlined />\n                  )\n                }\n                onClick={handleSwitchChartMode}\n              />\n            )}\n          </Popover>\n        </>\n      }\n    >\n      {displayMode === \"card\" && (\n        <>\n          {userInfo}\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Pool Liquidity:\n            </Text>\n            <div className=\"pool-card-cell \">\n              <div className=\"left\">\n                <div>{formatUSD.format(enriched.liquidity)}</div>\n                <div>\n                  <Text type=\"secondary\" style={small}>\n                    {formatNumber.format(enriched.liquidityA)}{\" \"}\n                    {enriched.names[0]}\n                  </Text>\n                </div>\n                <div>\n                  <Text type=\"secondary\" style={small}>\n                    {formatNumber.format(enriched.liquidityB)}{\" \"}\n                    {enriched.names[1]}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              LP Supply:\n            </Text>\n            <div className=\"pool-card-cell \" title={enriched.supply}>\n              {formatNumber.format(enriched.supply)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Value per token:\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.liquidity / enriched.supply)}\n            </div>\n          </div>\n\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Volume (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.volume24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Fees (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.fees24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Approx. APY (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatPct.format(enriched.apy24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Address:\n            </Text>\n            <div className=\"pool-card-cell \">\n              <div className=\"left\">\n                <div>\n                  <ExplorerLink\n                    address={enriched.address}\n                    type=\"account\"\n                    length={4}\n                  />\n                </div>\n                <div className=\"small\">\n                  <ExplorerLink\n                    address={enriched.accounts[0]}\n                    type=\"account\"\n                    style={small}\n                    length={4}\n                  />\n                  <Text type=\"secondary\" style={small}>\n                    {\" \"}\n                    {enriched.names[0]}\n                  </Text>\n                </div>\n                <div className=\"small\">\n                  <ExplorerLink\n                    address={enriched.accounts[1]}\n                    type=\"account\"\n                    style={small}\n                    length={4}\n                  />\n                  <Text type=\"secondary\" style={small}>\n                    {\" \"}\n                    {enriched.names[1]}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <SupplyOverview pool={pool} />\n          <div className=\"pool-card-row\">\n            {/* {item && <Button type=\"default\" onClick={setPair}>Add</Button>} */}\n            {props.account && (\n              <Button onClick={handleSwitchViewMode}>Remove</Button>\n            )}\n          </div>\n        </>\n      )}\n      {displayMode === \"chart\" && (\n        <>\n          <HistoricalLiquidity\n            pool={pool}\n            current={formatUSD.format(enriched.liquidity)}\n          />\n          <HistoricalVolume\n            pool={pool}\n            current={formatUSD.format(enriched.volume24h)}\n          />\n        </>\n      )}\n      {displayMode === \"remove\" && account && (\n        <RemoveLiquidityEntry\n          instance={{ pool: pool, account: account }}\n          enriched={enriched}\n        />\n      )}\n    </Card>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { ConfigProvider, Empty } from \"antd\";\nimport { useOwnedPools } from \"../../utils/pools\";\nimport { cache } from \"../../utils/accounts\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport \"./quickView.less\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { formatUSD } from \"../../utils/utils\";\n\nconst PoolItem = (props: {\n  item: { pool: PoolInfo; isFeeAccount: boolean; account: TokenAccount };\n  poolDetails: any;\n}) => {\n  const item = props.item;\n  const mint = cache.getMint(item.account.info.mint.toBase58());\n  const amount =\n    item.account.info.amount.toNumber() / Math.pow(10, mint?.decimals || 0);\n\n  const supply = mint?.supply.toNumber() || 0;\n  const poolContribution = item.account.info.amount.toNumber() / supply;\n  const contributionInUSD = poolContribution * props.poolDetails?.liquidity;\n  const feesInUSD = poolContribution * props.poolDetails?.fees;\n\n  // amount / supply * liquidity\n\n  if (!amount) {\n    return null;\n  }\n\n  const sorted = item.pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n\n  if (item) {\n    return (\n      <div\n        className=\"pool-item-row\"\n        title={`LP Token: ${props.item.pool.pubkeys.mint.toBase58()}, account: ${props.item.account.pubkey.toBase58()}`}\n      >\n        <PoolIcon\n          mintA={sorted[0]}\n          mintB={sorted[1]}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n        <div className=\"pool-item-name\">{props.poolDetails?.name}</div>\n        <div className=\"pool-item-amount\">\n          {formatUSD.format(contributionInUSD)}\n        </div>\n        <div className=\"pool-item-amount\">{formatUSD.format(feesInUSD)}</div>\n        <div className=\"pool-item-type\" title=\"Fee account\">\n          {item.isFeeAccount ? \" (F) \" : \" \"}\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const PoolAccounts = (props: { legacy: boolean }) => {\n  const pools = useOwnedPools(props.legacy);\n  const userPools = useMemo(() => {\n    return pools.map((p) => p.pool);\n  }, [pools]);\n\n  const enriched = useEnrichedPools(userPools);\n\n  return (\n    <>\n      <div>Your Liquidity</div>\n      <ConfigProvider\n        renderEmpty={() => (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description=\"No liquidity found.\"\n          />\n        )}\n      >\n        <div className=\"pools-grid\">\n          <div className=\"pool-item-header\">\n            <div style={{ width: 48 }} />\n            <div className=\"pool-item-name\">Pool</div>\n            <div className=\"pool-item-amount\">Liquidity</div>\n            <div className=\"pool-item-amount\">Fees</div>\n            <div className=\"pool-item-type\" />\n            <div />\n          </div>\n          {pools.map((p) => (\n            <PoolItem\n              key={p?.account.pubkey.toBase58()}\n              item={p as any}\n              poolDetails={enriched.find((e) => e.raw === p.pool)}\n            />\n          ))}\n        </div>\n      </ConfigProvider>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useConnection, useSlippageConfig } from \"../../utils/connection\";\nimport { Button, Modal } from \"antd\";\nimport { cache, useCachedPool } from \"../../utils/accounts\";\nimport {\n  addLiquidity,\n  removeLiquidity,\n  useOwnedPools,\n} from \"../../utils/pools\";\nimport { useWallet } from \"../../context/wallet\";\nimport { PoolAccounts } from \"../pool/quickView\";\nimport { LiquidityComponent } from \"../../models\";\n\nexport const MigrationModal = () => {\n  const [visible, setVisable] = useState(false);\n  const [ack, setAck] = useState(false);\n  const [executing, setExecuting] = useState(false);\n  const [completed, setCompleted] = useState(false);\n\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const { slippage } = useSlippageConfig();\n\n  const activePools = useCachedPool();\n  const legacyOwned = useOwnedPools(true);\n\n  const poolsToMigrate = useMemo(() => {\n    return legacyOwned\n      .map((item) => {\n        const account = item.account;\n        const fromPool = item.pool;\n\n        const toPool = activePools.pools.find(\n          (p) =>\n            (p.pubkeys.holdingMints[0].equals(\n              fromPool.pubkeys.holdingMints[0]\n            ) &&\n              p.pubkeys.holdingMints[1].equals(\n                fromPool.pubkeys.holdingMints[1]\n              )) ||\n            (p.pubkeys.holdingMints[0].equals(\n              fromPool.pubkeys.holdingMints[1]\n            ) &&\n              p.pubkeys.holdingMints[1].equals(\n                fromPool.pubkeys.holdingMints[0]\n              ))\n        );\n\n        return {\n          account,\n          fromPool,\n          toPool,\n        };\n      })\n      .filter((item) => item.toPool !== undefined);\n  }, [activePools, legacyOwned]);\n\n  const handleOk = useCallback(async () => {\n    setAck(true);\n    setExecuting(true);\n    for (let i = 0; i < poolsToMigrate.length; i++) {\n      try {\n        const item = poolsToMigrate[i];\n        const account = item.account;\n        const fromPool = item.fromPool;\n        const toPool = item.toPool;\n\n        let liquidityAmount = account.info.amount.toNumber();\n        const poolMint = await cache.queryMint(\n          connection,\n          fromPool.pubkeys.mint\n        );\n        const baseAccount = await cache.queryAccount(\n          connection,\n          fromPool.pubkeys.holdingAccounts[0]\n        );\n        const quoteAccount = await cache.queryAccount(\n          connection,\n          fromPool.pubkeys.holdingAccounts[1]\n        );\n\n        const ownershipRatio = liquidityAmount / poolMint.supply.toNumber();\n\n        const baseAmount = Math.floor(\n          baseAccount.info.amount.toNumber() * ownershipRatio\n        );\n        const quoteAmount = Math.floor(\n          quoteAccount.info.amount.toNumber() * ownershipRatio\n        );\n\n        const toAccounts = await removeLiquidity(\n          connection,\n          wallet,\n          liquidityAmount,\n          account,\n          fromPool\n        );\n\n        const sameMintOrder =\n          fromPool.pubkeys.holdingMints[0].toBase58() ===\n          toPool?.pubkeys.holdingMints[0].toBase58();\n        if (!sameMintOrder) {\n          toAccounts.reverse();\n        }\n\n        const components: LiquidityComponent[] = [\n          {\n            amount: baseAmount,\n            account: cache.getAccount(toAccounts[0]),\n            mintAddress: toPool?.pubkeys.holdingMints[0].toBase58() || \"\",\n          },\n          {\n            amount: quoteAmount,\n            account: cache.getAccount(toAccounts[1]),\n            mintAddress: toPool?.pubkeys.holdingMints[1].toBase58() || \"\",\n          },\n        ];\n        await addLiquidity(connection, wallet, components, slippage, toPool);\n      } catch {\n        // TODO:\n      }\n    }\n    setExecuting(false);\n    setCompleted(true);\n  }, [connection, wallet, slippage, setAck, poolsToMigrate]);\n\n  const handleCancel = useCallback(() => {\n    setAck(true);\n\n    if (!executing) {\n      setVisable(false);\n    }\n  }, [executing, setVisable, setAck]);\n\n  useEffect(() => {\n    if (poolsToMigrate.length > 0 && !ack) {\n      setVisable(true);\n    }\n  }, [poolsToMigrate, connected, ack]);\n\n  return (\n    <Modal\n      visible={visible}\n      title=\"Liquidity migration\"\n      onOk={handleOk}\n      onCancel={handleCancel}\n      closable={!executing}\n      footer={\n        completed\n          ? []\n          : [\n              <Button key=\"back\" onClick={handleCancel} disabled={executing}>\n                Ask me later\n              </Button>,\n              <Button\n                key=\"submit\"\n                type=\"primary\"\n                loading={executing}\n                onClick={handleOk}\n              >\n                Migrate\n              </Button>,\n            ]\n      }\n    >\n      {completed ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n          }}\n        >\n          <h2>Congratulations!</h2>\n          <div>Your migration has been successful.</div>\n          <Button type=\"primary\" onClick={handleOk}>\n            Close\n          </Button>\n        </div>\n      ) : (\n        <>\n          <p>\n            You are identified as liquidity provider that used v1 of Serum Swap.\n          </p>\n          <p>\n            Please click migrate button to move to new version of the contract\n          </p>\n          <p>During migration your wallet will ask for multiple approvals.</p>\n          <PoolAccounts legacy={true} />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Popover,\n  Row,\n  Table,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { AppBar } from \"./../appBar\";\nimport { Settings } from \"../settings\";\nimport {\n  SettingOutlined,\n  TableOutlined,\n  OneToOneOutlined,\n} from \"@ant-design/icons\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { Input } from \"antd\";\nimport \"./styles.less\";\nimport echarts from \"echarts\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { usePools } from \"../../utils/pools\";\nimport {\n  formatNumber,\n  formatPct,\n  formatUSD,\n  useLocalStorageState,\n} from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\nimport { PoolCard } from \"./../pool/card\";\nimport { MigrationModal } from \"../migration\";\nimport { HistoricalLiquidity, HistoricalVolume } from \"./historical\";\n\nconst { Text } = Typography;\n\nconst { Search } = Input;\n\nconst FlashText = (props: { text: string; val: number }) => {\n  const [activeClass, setActiveClass] = useState(\"\");\n  const [value] = useState(props.val);\n  useEffect(() => {\n    if (props.val !== value) {\n      setActiveClass(props.val > value ? \"flash-positive\" : \"flash-negative\");\n\n      setTimeout(() => setActiveClass(\"\"), 200);\n    }\n  }, [props.text, props.val, value]);\n\n  return <span className={activeClass}>{props.text}</span>;\n};\n\ninterface Totals {\n  liquidity: number;\n  volume: number;\n  fees: number;\n}\n\nconst DEFAULT_DISPLAY_TYPE = \"Table\";\n\nexport const ChartsView = React.memo(() => {\n  const [search, setSearch] = useState<string>(\"\");\n  const [totals, setTotals] = useState<Totals>(() => ({\n    liquidity: 0,\n    volume: 0,\n    fees: 0,\n  }));\n  const chartDiv = useRef<HTMLDivElement>(null);\n  const echartsRef = useRef<any>(null);\n  const { pools } = usePools();\n  const enriched = useEnrichedPools(pools);\n\n  const [infoDisplayType, setInfoDisplayType] = useLocalStorageState(\n    \"infoDisplayType\",\n    DEFAULT_DISPLAY_TYPE\n  );\n\n  useEffect(() => {\n    if (chartDiv.current) {\n      echartsRef.current = echarts.init(chartDiv.current);\n    }\n\n    return () => {\n      echartsRef.current.dispose();\n    };\n  }, []);\n\n  // TODO: display user percent in the pool\n  // const { ownedPools } = useOwnedPools();\n\n  // TODO: create cache object with layout type, get, query, add\n\n  let searchRegex: RegExp | undefined = useMemo(() => {\n    try {\n      return new RegExp(search, \"i\");\n    } catch {\n      // ignore bad regex typed by user\n    }\n  }, [search]);\n\n  const updateChart = useCallback(() => {\n    if (echartsRef.current) {\n      echartsRef.current.setOption({\n        series: [\n          {\n            name: \"Liquidity\",\n            type: \"treemap\",\n            top: 0,\n            bottom: 10,\n            left: 30,\n            right: 30,\n            animation: false,\n            // visibleMin: 300,\n            label: {\n              show: true,\n              formatter: \"{b}\",\n            },\n            itemStyle: {\n              normal: {\n                borderColor: \"#000\",\n              },\n            },\n            breadcrumb: {\n              show: false,\n            },\n            data: enriched\n              .filter(\n                (row) => !search || !searchRegex || searchRegex.test(row.name)\n              )\n              .map((row) => {\n                return {\n                  value: row.liquidity,\n                  name: row.name,\n                  path: `Liquidity/${row.name}`,\n                  data: row,\n                };\n              }),\n          },\n        ],\n      });\n    }\n  }, [enriched, search, searchRegex]);\n\n  // Updates total values\n  useEffect(() => {\n    setTotals(\n      enriched.reduce(\n        (acc, item) => {\n          acc.liquidity = acc.liquidity + item.liquidity;\n          acc.volume = acc.volume + item.volume24h;\n          acc.fees = acc.fees + item.fees;\n          return acc;\n        },\n        { liquidity: 0, volume: 0, fees: 0 } as Totals\n      )\n    );\n\n    updateChart();\n  }, [enriched, updateChart, search]);\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: {},\n          },\n          children: (\n            <div style={{ display: \"flex\" }}>\n              <PoolIcon mintA={record.mints[0]} mintB={record.mints[1]} />\n              <a href={record.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                {text}\n              </a>\n            </div>\n          ),\n        };\n      },\n    },\n    {\n      title: \"Liquidity\",\n      dataIndex: \"liquidity\",\n      key: \"liquidity\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <div>\n              <div>{formatUSD.format(record.liquidity)}</div>\n              <div>\n                <Text type=\"secondary\" style={{ fontSize: 11 }}>\n                  {formatNumber.format(record.liquidityA)} {record.names[0]}\n                </Text>\n              </div>\n              <div>\n                <Text type=\"secondary\" style={{ fontSize: 11 }}>\n                  {formatNumber.format(record.liquidityB)} {record.names[1]}\n                </Text>\n              </div>\n            </div>\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.liquidity - b.liquidity,\n      defaultSortOrder: \"descend\" as any,\n    },\n    {\n      title: \"Supply\",\n      dataIndex: \"supply\",\n      key: \"supply\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: <FlashText text={text} val={record.supply} />,\n        };\n      },\n      sorter: (a: any, b: any) => a.supply - b.supply,\n    },\n    {\n      title: \"Volume (24h)\",\n      dataIndex: \"volume\",\n      key: \"volume\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.volume24h)}\n              val={record.volume24h}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.volume24h - b.volume24h,\n    },\n    {\n      title: \"Fees (24h)\",\n      dataIndex: \"fees24h\",\n      key: \"fees24h\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.fees24h)}\n              val={record.fees24h}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.fees24h - b.fees24h,\n    },\n    {\n      title: \"APY\",\n      dataIndex: \"apy\",\n      key: \"apy\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: formatPct.format(record.apy),\n        };\n      },\n      sorter: (a: any, b: any) => a.apy - b.apy,\n    },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { fontFamily: \"monospace\" } as React.CSSProperties,\n          },\n          children: <PoolAddress pool={record.raw} />,\n        };\n      },\n    },\n  ];\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <div className=\"info-header\">\n        <Search\n          className=\"search-input\"\n          placeholder=\"Filter\"\n          type=\"search\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          onSearch={(value) => setSearch(value)}\n          style={{ width: 200 }}\n        />\n        <Tooltip title=\"Show as table\">\n          <Button\n            size=\"small\"\n            type={infoDisplayType === \"Table\" ? \"primary\" : \"text\"}\n            onClick={() => setInfoDisplayType(\"Table\")}\n            icon={<TableOutlined />}\n          />\n        </Tooltip>\n        <Tooltip title=\"Show as cards\">\n          <Button\n            size=\"small\"\n            type={infoDisplayType === \"Card\" ? \"primary\" : \"text\"}\n            onClick={() => setInfoDisplayType(\"Card\")}\n            icon={<OneToOneOutlined />}\n          />\n        </Tooltip>\n      </div>\n      <Row gutter={16} style={{ padding: \"0px 30px\", margin: \"30px 0px\" }}>\n        <Col span={12}>\n          <Card>\n            <HistoricalLiquidity current={formatUSD.format(totals.liquidity)} />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <HistoricalVolume current={formatUSD.format(totals.volume)} />\n          </Card>\n        </Col>\n      </Row>\n      <div ref={chartDiv} style={{ height: \"250px\", width: \"100%\" }} />\n      {infoDisplayType === \"Table\" ? (\n        <Table\n          dataSource={enriched.filter(\n            (row) => !search || !searchRegex || searchRegex.test(row.name)\n          )}\n          columns={columns}\n          size=\"small\"\n          pagination={{ pageSize: 10 }}\n        />\n      ) : (\n        <div className=\"pool-grid\">\n          {enriched\n            .sort((a, b) => b.liquidity - a.liquidity)\n            .map((p) => {\n              return <PoolCard pool={p.raw} />;\n            })}\n        </div>\n      )}\n      <MigrationModal />\n    </>\n  );\n});\n","import React from \"react\";\nimport { Button, Popover } from \"antd\";\nimport { useOwnedPools } from \"../../utils/pools\";\nimport \"./view.less\";\nimport { Settings } from \"./../settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { AppBar } from \"./../appBar\";\nimport { useWallet } from \"../../context/wallet\";\nimport { PoolCard } from \"./card\";\nimport { MigrationModal } from \"../migration\";\n\nexport const PoolOverview = () => {\n  const owned = useOwnedPools();\n  const { connected } = useWallet();\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <div className=\"pool-grid\">\n        {owned.map((o) => (\n          <PoolCard\n            key={o.pool.pubkeys.account.toBase58()}\n            pool={o.pool}\n            account={o.account}\n          />\n        ))}\n        {!connected && <h3>Connect to a wallet to view your liquidity.</h3>}\n      </div>\n      <MigrationModal />\n    </>\n  );\n};\n","import { Button, Card, Popover, Spin, Typography } from \"antd\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { useWallet } from \"../../context/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport {\n  LoadingOutlined,\n  SwapOutlined,\n  QuestionCircleOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport {\n  swap,\n  usePoolForBasket,\n  PoolOperation,\n  LIQUIDITY_PROVIDER_FEE,\n} from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { colorWarning, getTokenName } from \"../../utils/utils\";\nimport { AdressesPopover } from \"../pool/address\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { AppBar } from \"../appBar\";\nimport { Settings } from \"../settings\";\nimport { MigrationModal } from \"../migration\";\n\nconst { Text } = Typography;\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const TradeEntry = () => {\n  const { wallet, connect, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { tokenMap } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount);\n    // @ts-ignore\n    setPoolOperation((op: PoolOperation) => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n\n        const components = [\n          {\n            account: A.account,\n            mintAddress: A.mintAddress,\n            amount: A.convertAmount(),\n          },\n          {\n            mintAddress: B.mintAddress,\n            amount: B.convertAmount(),\n          },\n        ];\n\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description:\n            \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\",\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <AdressesPopover pool={pool} />\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenInput);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <Button type=\"primary\" className=\"swap-button\" onClick={swapAccounts}>\n          ⇅\n        </Button>\n        <CurrencyInput\n          title=\"To (Estimate)\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenProceeds);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n      </div>\n      <Button\n        className=\"trade-button\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={connected ? handleSwap : connect}\n        style={{ width: \"100%\" }}\n      // disabled={true}\n      // disabled={\n      //   connected &&\n      //   (pendingTx ||\n      //     !A.account ||\n      //     !B.mintAddress ||\n      //     A.account === B.account ||\n      //     !A.sufficientBalance() ||\n      //     !pool)\n      // }\n      >\n        {generateActionLabel(\n          !pool\n            ? POOL_NOT_AVAILABLE(\n              getTokenName(tokenMap, A.mintAddress),\n              getTokenName(tokenMap, B.mintAddress)\n            )\n            : SWAP_LABEL,\n          connected,\n          tokenMap,\n          A,\n          B,\n          true\n        )}\n        {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n        {/* Swap is being deprecated */}\n      </Button>\n      <TradeInfo pool={pool} />\n    </>\n  );\n};\n\nexport const TradeInfo = (props: { pool?: PoolInfo }) => {\n  const { A, B } = useCurrencyPairState();\n  const { pool } = props;\n  const { slippage } = useSlippageConfig();\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n\n  const [amountOut, setAmountOut] = useState(0);\n  const [priceImpact, setPriceImpact] = useState(0);\n  const [lpFee, setLpFee] = useState(0);\n  const [exchangeRate, setExchangeRate] = useState(0);\n  const [priceAccount, setPriceAccount] = useState(\"\");\n\n  useEffect(() => {\n    if (!pool || enriched.length === 0) {\n      return;\n    }\n    if (B.amount) {\n      const minAmountOut = parseFloat(B?.amount) * (1 - slippage);\n      setAmountOut(minAmountOut);\n    }\n    const liqA = enriched[0].liquidityA;\n    const liqB = enriched[0].liquidityB;\n    const supplyRatio = liqA / liqB;\n    // We need to make sure the order matched the pool's accounts order\n    const enrichedA = A.mintAddress === enriched[0].mints[0] ? A : B;\n    const enrichedB = enrichedA.mintAddress === A.mintAddress ? B : A;\n    const calculatedRatio =\n      parseFloat(enrichedA.amount) / parseFloat(enrichedB.amount);\n    // % difference between pool ratio and  calculated ratio\n    setPriceImpact(Math.abs(100 - (calculatedRatio * 100) / supplyRatio));\n\n    // 6 decimals without trailing zeros\n    const lpFeeStr = (parseFloat(A.amount) * LIQUIDITY_PROVIDER_FEE).toFixed(6);\n    setLpFee(parseFloat(lpFeeStr));\n\n    if (priceAccount === B.mintAddress) {\n      setExchangeRate(parseFloat(B.amount) / parseFloat(A.amount));\n    } else {\n      setExchangeRate(parseFloat(A.amount) / parseFloat(B.amount));\n    }\n  }, [A, B, slippage, pool, enriched, priceAccount]);\n\n  const handleSwapPriceInfo = () => {\n    if (priceAccount !== B.mintAddress) {\n      setPriceAccount(B.mintAddress);\n    } else {\n      setPriceAccount(A.mintAddress);\n    }\n  };\n  return !!parseFloat(B.amount) ? (\n    <div className=\"pool-card\" style={{ width: \"initial\" }}>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">Price</Text>\n        <div className=\"pool-card-cell \" title={exchangeRate.toString()}>\n          <Button\n            shape=\"circle\"\n            size=\"middle\"\n            type=\"text\"\n            icon={<SwapOutlined />}\n            onClick={handleSwapPriceInfo}\n          >\n            {exchangeRate.toFixed(6)}&nbsp;\n            {priceAccount === B.mintAddress ? B.name : A.name} per&nbsp;\n            {priceAccount === B.mintAddress ? A.name : B.name}&nbsp;\n          </Button>\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                You transaction will revert if there is a large, unfavorable\n                price movement before it is confirmed.\n              </div>\n            }\n          >\n            Minimum Received <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div className=\"pool-card-cell \" title={amountOut.toString()}>\n          {amountOut.toFixed(6)} {B.name}\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                The difference between the market price and estimated price due\n                to trade size.\n              </div>\n            }\n          >\n            Price Impact <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div\n          className=\"pool-card-cell \"\n          title={priceImpact.toString()}\n          style={{ color: colorWarning(priceImpact) }}\n        >\n          {priceImpact < 0.01 ? \"< 0.01%\" : priceImpact.toFixed(3) + \"%\"}\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                A portion of each trade ({LIQUIDITY_PROVIDER_FEE * 100}%) goes\n                to liquidity providers as a protocol incentive.\n              </div>\n            }\n          >\n            Liquidity Provider Fee <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div className=\"pool-card-cell \" title={lpFee.toString()}>\n          {lpFee} {A.name}\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport const TradeView = () => {\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n      >\n        <TradeEntry />\n      </Card>\n      <MigrationModal />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Button, Card, Popover } from \"antd\";\nimport { TradeEntry } from \"./trade\";\nimport { AddToLiquidity } from \"./pool/add\";\nimport { Settings } from \"./settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { AppBar } from \"./appBar\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const ExchangeView = (props: {}) => {\n  const tabStyle: React.CSSProperties = { width: 120 };\n  const tabList = [\n    {\n      key: \"trade\",\n      tab: <div style={tabStyle}>Trade</div>,\n      render: () => {\n        return <TradeEntry />;\n      },\n    },\n    {\n      key: \"pool\",\n      tab: <div style={tabStyle}>Pool</div>,\n      render: () => {\n        return <AddToLiquidity />;\n      },\n    },\n  ];\n\n  const location = useLocation();\n  const history = useHistory();\n  const activeTab = location.pathname.indexOf(\"add\") < 0 ? \"trade\" : \"pool\";\n\n  const handleTabChange = (key: any) => {\n    if (activeTab !== key) {\n      if (key === \"trade\") {\n        history.push(\"/\");\n      } else {\n        history.push(\"/add\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n        tabList={tabList}\n        tabProps={{\n          tabBarGutter: 0,\n        }}\n        activeTabKey={activeTab}\n        onTabChange={(key) => {\n          handleTabChange(key);\n        }}\n      >\n        {tabList.find((t) => t.key === activeTab)?.render()}\n      </Card>\n    </>\n  );\n};\n","import { HashRouter, Route } from \"react-router-dom\";\nimport React from \"react\";\nimport { ChartsView } from \"./components/charts\";\n\nimport { WalletProvider } from \"./context/wallet\";\nimport { ConnectionProvider } from \"./utils/connection\";\nimport { AccountsProvider } from \"./utils/accounts\";\nimport { CurrencyPairProvider } from \"./utils/currencyPair\";\nimport { MarketProvider } from \"./context/market\";\nimport { PoolOverview } from \"./components/pool/view\";\nimport { ExchangeView } from \"./components/exchange\";\n\nexport function Routes() {\n  return (\n    <>\n      <HashRouter basename={\"/\"}>\n        <ConnectionProvider>\n          <WalletProvider>\n            <AccountsProvider>\n              <MarketProvider>\n                <CurrencyPairProvider>\n                  <Route exact path=\"/\" component={ExchangeView} />\n                  <Route exact path=\"/add\" component={ExchangeView} />\n                  <Route exact path=\"/info\" component={() => <ChartsView />} />\n                  <Route\n                    exact\n                    path=\"/pool\"\n                    component={() => <PoolOverview />}\n                  />\n                </CurrencyPairProvider>\n              </MarketProvider>\n            </AccountsProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </HashRouter>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.less\";\nimport GitHubButton from \"react-github-btn\";\nimport { Routes } from \"./routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Banner\">\n        <div\n          className=\"Banner-description\"\n          style={{\n            textAlign: 'left',\n            paddingLeft: '30px',\n            paddingTop: '5px'\n          }}\n        >\n          <strong>Swap is being deprecated.</strong>\n          <div\n            style={{\n              textAlign: 'left',\n              paddingLeft: '10px'\n            }}\n          >\n            <ul>\n              <li>\n                Removing liquidity is enabled through the My Pools tab\n              </li>\n              <li>\n                The Provide Liquidity and Swap functionalities have been disabled\n              </li>\n              <li>\n                For easy swapping using the on-chain Serum orderbook consider using\n                <a href={'https://raydium.io/swap/'} target=\"_blank\" rel=\"noopener noreferrer\"> raydium.io</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <Routes />\n      <div className=\"social-buttons\">\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-icon=\"octicon-star\"\n          data-size=\"large\"\n          data-show-count={true}\n          aria-label=\"Star solana-labs/oyster-swap on GitHub\"\n        >\n          Star\n        </GitHubButton>\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap/fork\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-size=\"large\"\n          aria-label=\"Fork project-serum/oyster-swap on GitHub\"\n        >\n          Fork\n        </GitHubButton>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { shortenAddress } from \"./../utils/utils\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      // eslint-disable-next-line react/jsx-no-target-blank\n      target=\"_blank\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import BN from 'bn.js';\nimport { useCallback, useState } from \"react\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nimport { PoolInfo, TokenAccount } from \"./../models\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mintAddress: string,\n  shorten = true,\n  length = 5\n): string {\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, length)}...` : mintAddress;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress: string\n): string | undefined {\n  return map.get(mintAddress)?.logoURI;\n}\n\nexport function getPoolName(\n  map: KnownTokenMap,\n  pool: PoolInfo,\n  shorten = true\n) {\n  const sorted = pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n  return sorted.map((item) => getTokenName(map, item, shorten)).join(\"/\");\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\", \"wUSDT\", \"WUSDT\"]);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === \"number\" ? new BN(account) : account.info.amount;\n\n  const precision = new BN(10).pow(new BN(mint?.decimals || 0));\n\n  // avoid overflowing 53 bit numbers on calling toNumber()\n  let div = amount.div(precision).toNumber();\n  let rem = amount.mod(precision).toNumber() / precision.toNumber();\n  let result = (div + rem) * rate;\n\n  return result;\n}\n\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nconst format = (val: number, precision: number, abbr: boolean) =>\n  abbr ? abbreviateNumber(val, precision) : val.toFixed(precision);\n\nexport function formatTokenAmount(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = \"\",\n  suffix = \"\",\n  precision = 6,\n  abbr = false\n): string {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${format(\n    convert(account, mint, rate),\n    precision,\n    abbr\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nexport const formatNumber = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatPriceNumber = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport const formatShortDate = new Intl.DateTimeFormat(\"en-US\", {\n  day: \"numeric\",\n  month: \"short\",\n});\n\n// returns a Color from a 4 color array, green to red, depending on the index\n// of the closer (up) checkpoint number from the value\nexport const colorWarning = (value = 0, valueCheckpoints = [1, 3, 5, 100]) => {\n  const defaultIndex = 1;\n  const colorCodes = [\"#27ae60\", \"inherit\", \"#f3841e\", \"#ff3945\"];\n  if (value > valueCheckpoints[valueCheckpoints.length - 1]) {\n    return colorCodes[defaultIndex];\n  }\n  const closest = [...valueCheckpoints].sort((a, b) => {\n    const first = a - value < 0 ? Number.POSITIVE_INFINITY : a - value;\n    const second = b - value < 0 ? Number.POSITIVE_INFINITY : b - value;\n    if (first < second) {\n      return -1;\n    } else if (first > second) {\n      return 1;\n    }\n    return 0;\n  })[0];\n  const index = valueCheckpoints.indexOf(closest);\n  if (index !== -1) {\n    return colorCodes[index];\n  }\n  return colorCodes[defaultIndex];\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"../context/wallet\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT } from \"./ids\";\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\nimport { usePools } from \"./pools\";\nimport { TokenAccount, PoolInfo } from \"./../models\";\nimport { notify } from \"./notifications\";\nimport { chunks } from \"./utils\";\nimport { EventEmitter } from \"./eventEmitter\";\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst accountEmitter = new EventEmitter();\n\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\nconst pendingAccountCalls = new Map<string, Promise<TokenAccount>>();\nconst accountsCache = new Map<string, TokenAccount>();\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\n\nconst getAccountInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find account\");\n  }\n\n  return tokenAccountFactory(pubKey, info);\n};\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport interface ParsedAccountBase {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unkown\n}\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nexport type AccountParser = (\n  pubkey: PublicKey,\n  data: AccountInfo<Buffer>\n) => ParsedAccountBase;\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = tokenAccountFactory;\n\nexport const GenericAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = connection.getAccountInfo(id).then((data) => {\n      if (!data) {\n        throw new Error(\"Account not found\");\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (id: PublicKey, obj: AccountInfo<Buffer>, parser?: AccountParser) => {\n    const address = id.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        \"Deserializer needs to be registered or passed as a parameter\"\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(id, obj);\n    genericCache.set(address, account);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  registerParser: (pubkey: PublicKey, parser: AccountParser) => {\n    keyToAccountParser.set(pubkey.toBase58(), parser);\n  },\n\n  queryAccount: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = accountsCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingAccountCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getAccountInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      accountsCache.set(address, data);\n      return data;\n    }) as Promise<TokenAccount>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  addAccount: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const account = tokenAccountFactory(pubKey, obj);\n    accountsCache.set(account.pubkey.toBase58(), account);\n    return account;\n  },\n  deleteAccount: (pubkey: PublicKey) => {\n    const id = pubkey?.toBase58();\n    accountsCache.delete(id);\n    accountEmitter.raiseAccountUpdated(id);\n  },\n  getAccount: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return accountsCache.get(key);\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey | undefined) => {\n    if (!pubKey) {\n      return;\n    }\n\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean\n) => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nfunction tokenAccountFactory(pubKey: PublicKey, info: AccountInfo<Buffer>) {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeAccount(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as TokenAccount;\n\n  return details;\n}\n\nfunction wrapNativeAccount(\n  pubkey: PublicKey,\n  account?: AccountInfo<Buffer>\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n  useEffect(() => {\n    if (!connection || !wallet?.publicKey) {\n      return;\n    }\n\n    connection.getAccountInfo(wallet.publicKey).then((acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(wallet.publicKey, (acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, wallet?.publicKey, connection]);\n\n  useEffect(() => {\n    if (!wallet?.publicKey) {\n      return;\n    }\n\n    const account = wrapNativeAccount(wallet?.publicKey, nativeAccount);\n    if (!account) {\n      return;\n    }\n\n    accountsCache.set(account.pubkey.toBase58(), account);\n  }, [wallet?.publicKey, nativeAccount]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value\n    .map((info) => {\n      const data = deserializeAccount(info.account.data);\n      // TODO: move to web3.js for decoding on the client side... maybe with callback\n      const details = {\n        pubkey: info.pubkey,\n        account: {\n          ...info.account,\n        },\n        info: data,\n      } as TokenAccount;\n\n      return details;\n    })\n    .forEach((acc) => {\n      accountsCache.set(acc.pubkey.toBase58(), acc);\n    });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const { pools } = usePools();\n\n  const publicKey = wallet?.publicKey;\n\n  const selectUserAccounts = useCallback(() => {\n    return [...accountsCache.values()].filter(\n      (a) => a.info.owner.toBase58() === publicKey?.toBase58()\n    );\n  }, [publicKey]);\n\n  useEffect(() => {\n    setUserAccounts(\n      [wrapNativeAccount(publicKey, nativeAccount), ...tokenAccounts].filter(\n        (a) => a !== undefined\n      ) as TokenAccount[]\n    );\n  }, [nativeAccount, publicKey, tokenAccounts]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      // cache host accounts to avoid query during swap\n      precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\n\n      precacheUserTokenAccounts(connection, publicKey).then(async () => {\n        const accounts = selectUserAccounts();\n        const mints = [...new Set(accounts.map(a => a.info.mint.toBase58())\n          .filter(a => cache.getMint(a) === undefined))]\n          .sort();\n        const response = await getMultipleAccounts(connection, mints, 'single');\n\n        response.keys.forEach((key, index) => {\n          if (response.array[index]) {\n            try {\n              cache.addMint(new PublicKey(key), response.array[index]);\n            } catch {\n              debugger;\n            }\n          }\n        });\n\n        setTokenAccounts(accounts);\n      });\n\n      const dispose = accountEmitter.onAccount(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter. discuss filter syntax\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        (info) => {\n          const id = typeof info.accountId === 'string' ? info.accountId as unknown as string : info.accountId.toBase58();\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n            // TODO: move to web3.js for decoding on the client side... maybe with callback\n            const details = {\n              pubkey: new PublicKey(id),\n              account: {\n                ...info.accountInfo,\n              },\n              info: data,\n            } as TokenAccount;\n\n            if (\n              PRECACHED_OWNERS.has(details.info.owner.toBase58()) ||\n              accountsCache.has(id)\n            ) {\n              accountsCache.set(id, details);\n              accountEmitter.raiseAccountUpdated(id);\n            }\n          } else if (info.accountInfo.data.length === MintLayout.span) {\n            if (mintCache.has(id)) {\n              const data = Buffer.from(info.accountInfo.data);\n              const mint = deserializeMint(data);\n              mintCache.set(id, mint);\n            }\n\n            accountEmitter.raiseAccountUpdated(id);\n          }\n\n          if (genericCache.has(id)) {\n            cache.add(new PublicKey(id), info.accountInfo);\n          }\n        },\n        \"singleGossip\"\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n        dispose();\n      };\n    }\n  }, [connection, connected, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        pools,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map((chunk) =>\n      getMultipleAccountsCore(connection, chunk, commitment)\n    )\n  );\n\n  const array = result\n    .map(\n      (a) =>\n        a.array\n          .map((acc) => {\n            if(!acc) {\n              return undefined;\n            }\n\n            const { data, ...rest } = acc;\n            const obj = {\n              ...rest,\n              data: Buffer.from(data[0], \"base64\"),\n            } as AccountInfo<Buffer>;\n            return obj;\n          }) as AccountInfo<Buffer>[]\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const args = connection._buildArgs([keys], commitment, \"base64\");\n\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\n  if (unsafeRes.error) {\n    throw new Error(\n      \"failed to get info about account \" + unsafeRes.error.message\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === \"string\" ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .queryMint(connection, id)\n      .then(setMint)\n      .catch((err) =>\n        notify({\n          message: err.message,\n          type: \"error\",\n        })\n      );\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === id) {\n        cache.queryMint(connection, id).then(setMint);\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useUserAccounts() {\n  const context = useContext(AccountsContext);\n  return {\n    userAccounts: context.userAccounts as TokenAccount[],\n  };\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache.queryAccount(connection, key).catch((err) =>\n          notify({\n            message: err.message,\n            type: \"error\",\n          })\n        );\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\nexport function useCachedPool(legacy = false) {\n  const context = useContext(AccountsContext);\n\n  const allPools = context.pools as PoolInfo[];\n  const pools = useMemo(() => {\n    return allPools.filter((p) => p.legacy === legacy);\n  }, [allPools, legacy]);\n\n  return {\n    pools,\n  };\n}\n\nexport const useSelectedAccount = (account: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.pubkey.toBase58() === account\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\nexport const useAccountByMint = (mint: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.info.mint.toBase58() === mint\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\n// TODO: expose in spl package\nconst deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nconst deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport { TokenAccount } from \"./account\";\n\nexport const DEFAULT_DENOMINATOR = 10_000;\n\nexport interface PoolInfo {\n  pubkeys: {\n    program: PublicKey;\n    account: PublicKey;\n    holdingAccounts: PublicKey[];\n    holdingMints: PublicKey[];\n    mint: PublicKey;\n    feeAccount?: PublicKey;\n  };\n  legacy: boolean;\n  raw: {\n    pubkey: PublicKey;\n    data: any;\n    account: AccountInfo<Buffer>;\n  };\n}\n\nexport interface LiquidityComponent {\n  amount: number;\n  account?: TokenAccount;\n  mintAddress: string;\n}\n\nexport enum CurveType {\n  ConstantProduct = 0,\n  ConstantPrice = 1,\n  Stable = 2,\n  ConstantProductWithOffset = 3,\n}\n\nexport interface PoolConfig {\n  curveType: CurveType;\n  fees: {\n    tradeFeeNumerator: number;\n    tradeFeeDenominator: number;\n    ownerTradeFeeNumerator: number;\n    ownerTradeFeeDenominator: number;\n    ownerWithdrawFeeNumerator: number;\n    ownerWithdrawFeeDenominator: number;\n    hostFeeNumerator: number;\n    hostFeeDenominator: number;\n  };\n\n  token_b_offset?: number;\n  token_b_price?: number;\n}\n","import { EventEmitter as Emitter } from \"eventemitter3\";\n\nexport class AccountUpdateEvent {\n  static type = \"AccountUpdate\";\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = \"MarketUpdate\";\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onAccount(callback: (args: AccountUpdateEvent) => void) {\n    this.emitter.on(AccountUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(AccountUpdateEvent.type, callback);\n  }\n\n  raiseAccountUpdated(id: string) {\n    this.emitter.emit(AccountUpdateEvent.type, new AccountUpdateEvent(id));\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n}\n","import { useLocalStorageState } from \"./utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\nimport {\n  TokenListProvider,\n  ENV as ChainID,\n  TokenInfo,\n} from \"@solana/spl-token-registry\";\nimport { cache, getMultipleAccounts } from \"./accounts\";\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n    chainID: ChainID.MainnetBeta,\n  },\n  {\n    name: \"testnet\" as ENV,\n    endpoint: clusterApiUrl(\"testnet\"),\n    chainID: ChainID.Testnet,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: clusterApiUrl(\"devnet\"),\n    chainID: ChainID.Devnet,\n  },\n  {\n    name: \"localnet\" as ENV,\n    endpoint: \"http://45.77.106.109:8899\",\n    chainID: ChainID.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const chain =\n    ENDPOINTS.find((end) => end.endpoint === endpoint) || ENDPOINTS[0];\n\n  const env = chain.name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    (async () => {\n      const res = await new TokenListProvider().resolve();\n      const list = res\n        .filterByChainId(chain.chainID)\n        .excludeByTag(\"nft\")\n        .getList();\n      const knownMints = list.reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      const accounts = await getMultipleAccounts(connection, [...knownMints.keys()], 'single');\n      accounts.keys.forEach((key, index) => {\n        const account = accounts.array[index];\n        if(!account) {\n          knownMints.delete(accounts.keys[index]);\n          return;\n        }\n\n        try {\n          cache.addMint(new PublicKey(key), account);\n        } catch {\n          // ignore\n        }\n      });\n\n      setTokenMap(knownMints);\n      setTokens([...knownMints.values()]);\n    })();\n  }, [chain, connection]);\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\",\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (\n      await connection.confirmTransaction(\n        txid,\n        options && (options.commitment as any)\n      )\n    ).value;\n\n    if (status?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n      );\n    }\n  }\n\n  return txid;\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TokenSwapLayout } from \"../models\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nlet TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nlet SWAP_PROGRAM_ID: PublicKey;\nlet SWAP_PROGRAM_LEGACY_IDS: PublicKey[];\nlet SWAP_PROGRAM_LAYOUT: any;\n\nexport const SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\n  \"HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN\"\n);\n\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS\n  ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`)\n  : SWAP_PROGRAM_OWNER_FEE_ADDRESS;\n\nexport const ENABLE_FEES_INPUT = false;\n\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS?.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS?.toBase58()}`);\n\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"),\n        layout: TokenSwapLayout,\n      },\n      legacy: [new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\")],\n    }),\n  },\n  {\n    name: \"testnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"),\n        layout: TokenSwapLayout,\n      },\n      legacy: [],\n    }),\n  },\n  {\n    name: \"devnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"),\n        layout: TokenSwapLayout,\n      },\n      legacy: [],\n    }),\n  },\n  {\n    name: \"localnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"369YmCWHGxznT7GGBhcLZDRcRoGWmGKFWdmtiPy78yj7\"),\n        layout: TokenSwapLayout,\n      },\n      legacy: [],\n    }),\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n\n  let swap = instance.swap();\n\n  SWAP_PROGRAM_ID = swap.current.pubkey;\n  SWAP_PROGRAM_LAYOUT = swap.current.layout;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swapLayout: SWAP_PROGRAM_LAYOUT,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS,\n  };\n};\n","import type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"@solana/web3.js\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/*\n * Helper for chunked send of large payloads\n */\nasync function ledgerSend(\n  transport: Transport,\n  instruction: number,\n  p1: number,\n  payload: Buffer\n) {\n  let p2 = 0;\n  let payloadOffset = 0;\n\n  if (payload.length > MAX_PAYLOAD) {\n    while (payload.length - payloadOffset > MAX_PAYLOAD) {\n      const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n      payloadOffset += MAX_PAYLOAD;\n      console.log(\n        \"send\",\n        (p2 | P2_MORE).toString(16),\n        chunk.length.toString(16),\n        chunk\n      );\n      const reply = await transport.send(\n        LEDGER_CLA,\n        instruction,\n        p1,\n        p2 | P2_MORE,\n        chunk\n      );\n      if (reply.length !== 2) {\n        throw new Error(\"Received unexpected reply payload\");\n      }\n      p2 |= P2_EXTEND;\n    }\n  }\n\n  const chunk = payload.slice(payloadOffset);\n  console.log(\"send\", p2.toString(16), chunk.length.toString(16), chunk);\n  const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n\n  return reply.slice(0, reply.length - 2);\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n: number = 0) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nexport function getSolanaDerivationPath(account?: number, change?: number) {\n  var length;\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  // eslint-disable-next-line\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\n\nexport async function signTransaction(\n  transport: Transport,\n  transaction: Transaction,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const messageBytes = transaction.serializeMessage();\n  return signBytes(transport, messageBytes, derivationPath);\n}\n\nexport async function signBytes(\n  transport: Transport,\n  bytes: Buffer,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const numPaths = Buffer.alloc(1);\n  numPaths.writeUInt8(1, 0);\n\n  const payload = Buffer.concat([numPaths, derivationPath, bytes]);\n\n  // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n  // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n  return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n}\n\nexport async function getPublicKey(\n  transport: Transport,\n  derivationPath: Buffer = getSolanaDerivationPath()\n) {\n  const publicKeyBytes = await ledgerSend(\n    transport,\n    INS_GET_PUBKEY,\n    P1_NON_CONFIRM,\n    derivationPath\n  );\n\n  return new PublicKey(publicKeyBytes);\n}\n","import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { PublicKey, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { CurveType, PoolConfig } from \"./pool\";\n\nexport { TokenSwap } from \"@solana/spl-token-swap\";\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = \"publicKey\"): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = \"uint64\"): Object => {\n  return BufferLayout.blob(8, property);\n};\n\nconst FEE_LAYOUT = BufferLayout.struct(\n  [\n    BufferLayout.nu64(\"tradeFeeNumerator\"),\n    BufferLayout.nu64(\"tradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n    BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.nu64(\"hostFeeNumerator\"),\n    BufferLayout.nu64(\"hostFeeDenominator\"),\n  ],\n  \"fees\"\n);\n\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([\n  BufferLayout.u8(\"isInitialized\"),\n  BufferLayout.u8(\"nonce\"),\n  publicKey(\"tokenAccountA\"),\n  publicKey(\"tokenAccountB\"),\n  publicKey(\"tokenPool\"),\n  uint64(\"feesNumerator\"),\n  uint64(\"feesDenominator\"),\n]);\n\nexport const TokenSwapLayoutV1: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    BufferLayout.u8(\"curveType\"),\n    uint64(\"tradeFeeNumerator\"),\n    uint64(\"tradeFeeDenominator\"),\n    uint64(\"ownerTradeFeeNumerator\"),\n    uint64(\"ownerTradeFeeDenominator\"),\n    uint64(\"ownerWithdrawFeeNumerator\"),\n    uint64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]\n);\n\nconst CURVE_NODE = BufferLayout.union(\n  BufferLayout.u8(),\n  BufferLayout.blob(32),\n  \"curve\"\n);\nCURVE_NODE.addVariant(0, BufferLayout.struct([]), \"constantProduct\");\nCURVE_NODE.addVariant(\n  1,\n  BufferLayout.struct([BufferLayout.nu64(\"token_b_price\")]),\n  \"constantPrice\"\n);\nCURVE_NODE.addVariant(2, BufferLayout.struct([]), \"stable\");\nCURVE_NODE.addVariant(\n  3,\n  BufferLayout.struct([BufferLayout.nu64(\"token_b_offset\")]),\n  \"offset\"\n);\n\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"version\"),\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    FEE_LAYOUT,\n    CURVE_NODE,\n  ]\n);\n\nexport const createInitSwapInstruction = (\n  tokenSwapAccount: Account,\n  authority: PublicKey,\n  tokenAccountA: PublicKey,\n  tokenAccountB: PublicKey,\n  tokenPool: PublicKey,\n  feeAccount: PublicKey,\n  destinationAccount: PublicKey,\n  tokenProgramId: PublicKey,\n  swapProgramId: PublicKey,\n  nonce: number,\n  config: PoolConfig,\n  isLatest: boolean\n): TransactionInstruction => {\n  const keys = [\n    { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n    { pubkey: tokenPool, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: false },\n    { pubkey: destinationAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  let data = Buffer.alloc(1024);\n  if (isLatest) {\n    const fields = [\n      BufferLayout.u8(\"instruction\"),\n      BufferLayout.u8(\"nonce\"),\n      BufferLayout.nu64(\"tradeFeeNumerator\"),\n      BufferLayout.nu64(\"tradeFeeDenominator\"),\n      BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n      BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n      BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n      BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n      BufferLayout.nu64(\"hostFeeNumerator\"),\n      BufferLayout.nu64(\"hostFeeDenominator\"),\n      BufferLayout.u8(\"curveType\"),\n    ];\n\n    if (config.curveType === CurveType.ConstantProductWithOffset) {\n      fields.push(BufferLayout.nu64(\"token_b_offset\"));\n      fields.push(BufferLayout.blob(24, \"padding\"));\n    } else if (config.curveType === CurveType.ConstantPrice) {\n      fields.push(BufferLayout.nu64(\"token_b_price\"));\n      fields.push(BufferLayout.blob(24, \"padding\"));\n    } else {\n      fields.push(BufferLayout.blob(32, \"padding\"));\n    }\n\n    const commandDataLayout = BufferLayout.struct(fields);\n\n    const { fees, ...rest } = config;\n\n    const encodeLength = commandDataLayout.encode(\n      {\n        instruction: 0, // InitializeSwap instruction\n        nonce,\n        ...fees,\n        ...rest,\n      },\n      data\n    );\n    data = data.slice(0, encodeLength);\n  } else {\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8(\"instruction\"),\n      BufferLayout.u8(\"nonce\"),\n      BufferLayout.u8(\"curveType\"),\n      BufferLayout.nu64(\"tradeFeeNumerator\"),\n      BufferLayout.nu64(\"tradeFeeDenominator\"),\n      BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n      BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n      BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n      BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n      BufferLayout.blob(16, \"padding\"),\n    ]);\n\n    const encodeLength = commandDataLayout.encode(\n      {\n        instruction: 0, // InitializeSwap instruction\n        nonce,\n        curveType: config.curveType,\n        tradeFeeNumerator: config.fees.tradeFeeNumerator,\n        tradeFeeDenominator: config.fees.tradeFeeDenominator,\n        ownerTradeFeeNumerator: config.fees.ownerTradeFeeNumerator,\n        ownerTradeFeeDenominator: config.fees.ownerTradeFeeDenominator,\n        ownerWithdrawFeeNumerator: config.fees.ownerWithdrawFeeNumerator,\n        ownerWithdrawFeeDenominator: config.fees.ownerWithdrawFeeDenominator,\n      },\n      data\n    );\n    data = data.slice(0, encodeLength);\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  transferAuthority: PublicKey,\n  sourceA: PublicKey,\n  sourceB: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  maximumTokenA: number | Numberu64,\n  maximumTokenB: number | Numberu64,\n  isLatest: boolean\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"maximumTokenA\"),\n    uint64(\"maximumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 2, // Deposit instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = isLatest\n    ? [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: transferAuthority, isSigner: true, isWritable: false },\n        { pubkey: sourceA, isSigner: false, isWritable: true },\n        { pubkey: sourceB, isSigner: false, isWritable: true },\n        { pubkey: intoA, isSigner: false, isWritable: true },\n        { pubkey: intoB, isSigner: false, isWritable: true },\n        { pubkey: poolToken, isSigner: false, isWritable: true },\n        { pubkey: poolAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ]\n    : [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: sourceA, isSigner: false, isWritable: true },\n        { pubkey: sourceB, isSigner: false, isWritable: true },\n        { pubkey: intoA, isSigner: false, isWritable: true },\n        { pubkey: intoB, isSigner: false, isWritable: true },\n        { pubkey: poolToken, isSigner: false, isWritable: true },\n        { pubkey: poolAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositExactOneInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  transferAuthority: PublicKey,\n  source: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  sourceTokenAmount: number | Numberu64,\n  minimumPoolTokenAmount: number | Numberu64,\n  isLatest: boolean\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"sourceTokenAmount\"),\n    uint64(\"minimumPoolTokenAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 4, // DepositExactOne instruction\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer(),\n    },\n    data\n  );\n\n  const keys = isLatest\n    ? [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: transferAuthority, isSigner: true, isWritable: false },\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: intoA, isSigner: false, isWritable: true },\n        { pubkey: intoB, isSigner: false, isWritable: true },\n        { pubkey: poolToken, isSigner: false, isWritable: true },\n        { pubkey: poolAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ]\n    : [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: intoA, isSigner: false, isWritable: true },\n        { pubkey: intoB, isSigner: false, isWritable: true },\n        { pubkey: poolToken, isSigner: false, isWritable: true },\n        { pubkey: poolAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  transferAuthority: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey | undefined,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccountA: PublicKey,\n  userAccountB: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  minimumTokenA: number | Numberu64,\n  minimumTokenB: number | Numberu64,\n  isLatest: boolean\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"minimumTokenA\"),\n    uint64(\"minimumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 3, // Withdraw instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = isLatest\n    ? [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: transferAuthority, isSigner: true, isWritable: false },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n        { pubkey: fromA, isSigner: false, isWritable: true },\n        { pubkey: fromB, isSigner: false, isWritable: true },\n        { pubkey: userAccountA, isSigner: false, isWritable: true },\n        { pubkey: userAccountB, isSigner: false, isWritable: true },\n      ]\n    : [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n        { pubkey: fromA, isSigner: false, isWritable: true },\n        { pubkey: fromB, isSigner: false, isWritable: true },\n        { pubkey: userAccountA, isSigner: false, isWritable: true },\n        { pubkey: userAccountB, isSigner: false, isWritable: true },\n      ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawExactOneInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  transferAuthority: PublicKey,\n  poolMint: PublicKey,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccount: PublicKey,\n  feeAccount: PublicKey | undefined,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  sourceTokenAmount: number | Numberu64,\n  maximumTokenAmount: number | Numberu64,\n  isLatest: boolean\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"sourceTokenAmount\"),\n    uint64(\"maximumTokenAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 5, // WithdrawExactOne instruction\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      maximumTokenAmount: new Numberu64(maximumTokenAmount).toBuffer(),\n    },\n    data\n  );\n\n  const keys = isLatest\n    ? [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: transferAuthority, isSigner: true, isWritable: false },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n        { pubkey: fromA, isSigner: false, isWritable: true },\n        { pubkey: fromB, isSigner: false, isWritable: true },\n        { pubkey: userAccount, isSigner: false, isWritable: true },\n      ]\n    : [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n        { pubkey: fromA, isSigner: false, isWritable: true },\n        { pubkey: fromB, isSigner: false, isWritable: true },\n        { pubkey: userAccount, isSigner: false, isWritable: true },\n      ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const swapInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  transferAuthority: PublicKey,\n  userSource: PublicKey,\n  poolSource: PublicKey,\n  poolDestination: PublicKey,\n  userDestination: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  amountIn: number | Numberu64,\n  minimumAmountOut: number | Numberu64,\n  programOwner: PublicKey | undefined,\n  isLatest: boolean\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"amountIn\"),\n    uint64(\"minimumAmountOut\"),\n  ]);\n\n  const keys = isLatest\n    ? [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: transferAuthority, isSigner: true, isWritable: false },\n        { pubkey: userSource, isSigner: false, isWritable: true },\n        { pubkey: poolSource, isSigner: false, isWritable: true },\n        { pubkey: poolDestination, isSigner: false, isWritable: true },\n        { pubkey: userDestination, isSigner: false, isWritable: true },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: feeAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ]\n    : [\n        { pubkey: tokenSwap, isSigner: false, isWritable: false },\n        { pubkey: authority, isSigner: false, isWritable: false },\n        { pubkey: userSource, isSigner: false, isWritable: true },\n        { pubkey: poolSource, isSigner: false, isWritable: true },\n        { pubkey: poolDestination, isSigner: false, isWritable: true },\n        { pubkey: userDestination, isSigner: false, isWritable: true },\n        { pubkey: poolMint, isSigner: false, isWritable: true },\n        { pubkey: feeAccount, isSigner: false, isWritable: true },\n        { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      ];\n\n  // optional depending on the build of token-swap program\n  if (programOwner) {\n    keys.push({ pubkey: programOwner, isSigner: false, isWritable: true });\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 1, // Swap instruction\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n","import {\n  Account,\n  AccountInfo,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { sendTransaction, useConnection } from \"./connection\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Token, MintLayout, AccountLayout } from \"@solana/spl-token\";\nimport { notify } from \"./notifications\";\nimport {\n  cache,\n  getCachedAccount,\n  useUserAccounts,\n  useCachedPool,\n  getMultipleAccounts,\n} from \"./accounts\";\nimport {\n  programIds,\n  SWAP_HOST_FEE_ADDRESS,\n  SWAP_PROGRAM_OWNER_FEE_ADDRESS,\n  WRAPPED_SOL_MINT,\n} from \"./ids\";\nimport {\n  LiquidityComponent,\n  PoolInfo,\n  TokenAccount,\n  createInitSwapInstruction,\n  TokenSwapLayout,\n  depositInstruction,\n  withdrawInstruction,\n  TokenSwapLayoutLegacyV0 as TokenSwapLayoutV0,\n  TokenSwapLayoutV1,\n  swapInstruction,\n  PoolConfig,\n  depositExactOneInstruction,\n  withdrawExactOneInstruction,\n} from \"./../models\";\n\nconst LIQUIDITY_TOKEN_PRECISION = 8;\n\nexport const LIQUIDITY_PROVIDER_FEE = 0.003;\nexport const SERUM_FEE = 0.0005;\n\nexport const isLatest = (swap: AccountInfo<Buffer>) => {\n  return swap.data.length === TokenSwapLayout.span;\n};\n\nexport const removeLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  liquidityAmount: number,\n  account: TokenAccount,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    throw new Error(\"Pool is required\");\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  // TODO get min amounts based on total supply and liquidity\n  const minAmount0 = 0;\n  const minAmount1 = 0;\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const toAccounts: PublicKey[] = [\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountA.info.mint,\n      signers\n    ),\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountB.info.mint,\n      signers\n    ),\n  ];\n\n  const isLatestSwap = isLatest(pool.raw.account);\n  const transferAuthority = approveAmount(\n    instructions,\n    cleanupInstructions,\n    account.pubkey,\n    wallet.publicKey,\n    liquidityAmount,\n    isLatestSwap ? undefined : authority\n  );\n\n  if (isLatestSwap) {\n    signers.push(transferAuthority);\n  }\n\n  // withdraw\n  instructions.push(\n    withdrawInstruction(\n      pool.pubkeys.account,\n      authority,\n      transferAuthority.publicKey,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccounts[0],\n      toAccounts[1],\n      pool.pubkeys.program,\n      programIds().token,\n      liquidityAmount,\n      minAmount0,\n      minAmount1,\n      isLatestSwap\n    )\n  );\n\n  const deleteAccount = liquidityAmount === account.info.amount.toNumber();\n  if (deleteAccount) {\n    instructions.push(\n      Token.createCloseAccountInstruction(\n        programIds().token,\n        account.pubkey,\n        authority,\n        wallet.publicKey,\n        []\n      )\n    );\n  }\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  if (deleteAccount) {\n    cache.deleteAccount(account.pubkey);\n  }\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n\n  return [\n    accountA.info.mint.equals(WRAPPED_SOL_MINT)\n      ? (wallet.publicKey as PublicKey)\n      : toAccounts[0],\n    accountB.info.mint.equals(WRAPPED_SOL_MINT)\n      ? (wallet.publicKey as PublicKey)\n      : toAccounts[1],\n  ];\n};\n\nexport const removeExactOneLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  account: TokenAccount,\n  liquidityAmount: number,\n  tokenAmount: number,\n  tokenMint: string,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    throw new Error(\"Pool is required\");\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n  // Maximum number of LP tokens\n  // needs to be different math because the new instruction\n  const liquidityMaxAmount = liquidityAmount * (1 + SLIPPAGE);\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  const tokenMatchAccount =\n    tokenMint === pool.pubkeys.holdingMints[0].toBase58() ? accountA : accountB;\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const toAccount: PublicKey = await findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    tokenMatchAccount.info.mint,\n    signers\n  );\n\n  const isLatestSwap = isLatest(pool.raw.account);\n  const transferAuthority = approveAmount(\n    instructions,\n    cleanupInstructions,\n    account.pubkey,\n    wallet.publicKey,\n    account.info.amount.toNumber(), // liquidityAmount <- need math tuning\n    isLatestSwap ? undefined : authority\n  );\n  if (isLatestSwap) {\n    signers.push(transferAuthority);\n  }\n\n  // withdraw exact one\n  instructions.push(\n    withdrawExactOneInstruction(\n      pool.pubkeys.account,\n      authority,\n      transferAuthority.publicKey,\n      pool.pubkeys.mint,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccount,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      tokenAmount,\n      liquidityMaxAmount,\n      isLatestSwap\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n\n  return tokenMatchAccount.info.mint.equals(WRAPPED_SOL_MINT)\n    ? (wallet.publicKey as PublicKey)\n    : toAccount;\n};\n\nexport const swap = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  SLIPPAGE: number,\n  pool?: PoolInfo\n) => {\n  if (!pool || !components[0].account) {\n    notify({\n      type: \"error\",\n      message: `Pool doesn't exsist.`,\n      description: `Swap trade cancelled`,\n    });\n    return;\n  }\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amountIn = components[0].amount; // these two should include slippage\n  const minAmountOut = components[1].amount * (1 - SLIPPAGE);\n  const holdingA =\n    pool.pubkeys.holdingMints[0]?.toBase58() ===\n    components[0].account.info.mint.toBase58()\n      ? pool.pubkeys.holdingAccounts[0]\n      : pool.pubkeys.holdingAccounts[1];\n  const holdingB =\n    holdingA === pool.pubkeys.holdingAccounts[0]\n      ? pool.pubkeys.holdingAccounts[1]\n      : pool.pubkeys.holdingAccounts[0];\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority || !pool.pubkeys.feeAccount) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const fromAccount = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    components[0].account,\n    wallet.publicKey,\n    amountIn + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    new PublicKey(components[1].mintAddress),\n    signers\n  );\n\n  const isLatestSwap = isLatest(pool.raw.account);\n  // create approval for transfer transactions\n  const transferAuthority = approveAmount(\n    instructions,\n    cleanupInstructions,\n    fromAccount,\n    wallet.publicKey,\n    amountIn,\n    isLatestSwap ? undefined : authority\n  );\n  if (isLatestSwap) {\n    signers.push(transferAuthority);\n  }\n\n  let hostFeeAccount = SWAP_HOST_FEE_ADDRESS\n    ? findOrCreateAccountByMint(\n        wallet.publicKey,\n        SWAP_HOST_FEE_ADDRESS,\n        instructions,\n        cleanupInstructions,\n        accountRentExempt,\n        pool.pubkeys.mint,\n        signers\n      )\n    : undefined;\n\n  // swap\n  instructions.push(\n    swapInstruction(\n      pool.pubkeys.account,\n      authority,\n      transferAuthority.publicKey,\n      fromAccount,\n      holdingA,\n      holdingB,\n      toAccount,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amountIn,\n      minAmountOut,\n      hostFeeAccount,\n      isLatestSwap\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Trade executed.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const addLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  slippage: number,\n  pool?: PoolInfo,\n  options?: PoolConfig,\n  depositType: string = \"both\"\n) => {\n  if (depositType === \"one\" && pool) {\n    await _addLiquidityExactOneExistingPool(\n      pool,\n      components[0],\n      connection,\n      wallet\n    );\n  } else if (!pool) {\n    if (!options) {\n      throw new Error(\"Options are required to create new pool.\");\n    }\n\n    await _addLiquidityNewPool(wallet, connection, components, options);\n  } else {\n    await _addLiquidityExistingPool(pool, components, connection, wallet);\n  }\n};\n\nconst getHoldings = (connection: Connection, accounts: string[]) => {\n  return accounts.map((acc) =>\n    cache.queryAccount(connection, new PublicKey(acc))\n  );\n};\n\nconst toPoolInfo = (item: any, program: PublicKey) => {\n  const mint = new PublicKey(item.data.tokenPool);\n  return {\n    pubkeys: {\n      account: item.pubkey,\n      program: program,\n      mint,\n      holdingMints: [] as PublicKey[],\n      holdingAccounts: [item.data.tokenAccountA, item.data.tokenAccountB].map(\n        (a) => new PublicKey(a)\n      ),\n    },\n    legacy: false,\n    raw: item,\n  } as PoolInfo;\n};\n\nexport const usePools = () => {\n  const connection = useConnection();\n  const [pools, setPools] = useState<PoolInfo[]>([]);\n\n  // initial query\n  useEffect(() => {\n    setPools([]);\n\n    const queryPools = async (swapId: PublicKey, isLegacy = false) => {\n      let poolsArray: PoolInfo[] = [];\n      (await connection.getProgramAccounts(swapId))\n        .filter(\n          (item) =>\n            item.account.data.length === TokenSwapLayout.span ||\n            item.account.data.length === TokenSwapLayoutV1.span ||\n            item.account.data.length === TokenSwapLayoutV0.span\n        )\n        .map((item) => {\n          let result = {\n            data: undefined as any,\n            account: item.account,\n            pubkey: item.pubkey,\n            init: async () => {},\n          };\n\n          const layout =\n            item.account.data.length === TokenSwapLayout.span\n              ? TokenSwapLayout\n              : item.account.data.length === TokenSwapLayoutV1.span\n              ? TokenSwapLayoutV1\n              : TokenSwapLayoutV0;\n\n          // handling of legacy layout can be removed soon...\n          if (layout === TokenSwapLayoutV0) {\n            result.data = layout.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            poolsArray.push(pool as PoolInfo);\n\n            result.init = async () => {\n              try {\n                // TODO: this is not great\n                // Ideally SwapLayout stores hash of all the mints to make finding of pool for a pair easier\n                const holdings = await Promise.all(\n                  getHoldings(connection, [\n                    result.data.tokenAccountA,\n                    result.data.tokenAccountB,\n                  ])\n                );\n\n                pool.pubkeys.holdingMints = [\n                  holdings[0].info.mint,\n                  holdings[1].info.mint,\n                ] as PublicKey[];\n              } catch (err) {\n                console.log(err);\n              }\n            };\n          } else {\n            result.data = layout.decode(item.account.data);\n\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            pool.pubkeys.feeAccount = new PublicKey(result.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(result.data.mintA),\n              new PublicKey(result.data.mintB),\n            ] as PublicKey[];\n\n            poolsArray.push(pool as PoolInfo);\n          }\n\n          return result;\n        });\n\n      const toQuery = [...poolsArray\n        .map(\n          (p) =>\n            [\n              ...p.pubkeys.holdingAccounts.map((h) => h.toBase58()),\n              ...p.pubkeys.holdingMints.map((h) => h.toBase58()),\n              p.pubkeys.feeAccount?.toBase58(), // used to calculate volume approximation\n              p.pubkeys.mint.toBase58(),\n            ].filter((p) => p) as string[]\n        )\n        .flat()\n        .filter(acc => cache.get(acc) === undefined)\n        .reduce((acc, item) => {\n          acc.add(item);\n          return acc;\n        }, new Set<string>())\n        .keys()]\n        .sort();\n\n      // This will pre-cache all accounts used by pools\n      // All those accounts are updated whenever there is a change\n      await getMultipleAccounts(connection, toQuery, \"single\").then(\n        ({ keys, array }) => {\n          return array.map((obj, index) => {\n            if (!obj) {\n              return undefined;\n            }\n\n            const pubKey = new PublicKey(keys[index]);\n            if (obj.data.length === AccountLayout.span) {\n              return cache.addAccount(pubKey, obj);\n            } else if (obj.data.length === MintLayout.span) {\n              if (!cache.getMint(pubKey)) {\n                return cache.addMint(pubKey, obj);\n              }\n            }\n\n            return obj;\n          }).filter(a => !!a) as any[];\n        }\n      );\n\n      return poolsArray;\n    };\n\n    Promise.all([\n      queryPools(programIds().swap),\n      ...programIds().swap_legacy.map((leg) => queryPools(leg, true)),\n    ]).then((all) => {\n      setPools(all.flat());\n    });\n  }, [connection]);\n\n  useEffect(() => {\n    const subID = connection.onProgramAccountChange(\n      programIds().swap,\n      async (info) => {\n        const id = (info.accountId as unknown) as string;\n        if (info.accountInfo.data.length === programIds().swapLayout.span) {\n          const account = info.accountInfo;\n          const updated = {\n            data: programIds().swapLayout.decode(account.data),\n            account: account,\n            pubkey: new PublicKey(id),\n          };\n\n          const index =\n            pools &&\n            pools.findIndex((p) => p.pubkeys.account.toBase58() === id);\n          if (index && index >= 0 && pools) {\n            // TODO: check if account is empty?\n\n            const filtered = pools.filter((p, i) => i !== index);\n            setPools([...filtered, toPoolInfo(updated, programIds().swap)]);\n          } else {\n            let pool = toPoolInfo(updated, programIds().swap);\n\n            pool.pubkeys.feeAccount = new PublicKey(updated.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(updated.data.mintA),\n              new PublicKey(updated.data.mintB),\n            ] as PublicKey[];\n\n            setPools([...pools, pool]);\n          }\n        }\n      },\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeProgramAccountChangeListener(subID);\n    };\n  }, [connection, pools]);\n\n  return { pools };\n};\n\nexport const usePoolForBasket = (mints: (string | undefined)[]) => {\n  const connection = useConnection();\n  const { pools } = useCachedPool();\n  const [pool, setPool] = useState<PoolInfo>();\n  const sortedMints = useMemo(() => [...mints].sort(), [...mints]); // eslint-disable-line\n  useEffect(() => {\n    (async () => {\n      // reset pool during query\n      setPool(undefined);\n      let matchingPool = pools\n        .filter((p) => !p.legacy)\n        .filter((p) =>\n          p.pubkeys.holdingMints\n            .map((a) => a.toBase58())\n            .sort()\n            .every((address, i) => address === sortedMints[i])\n        );\n\n      const poolQuantities: { [pool: string]: number } = {};\n      for (let i = 0; i < matchingPool.length; i++) {\n        const p = matchingPool[i];\n\n        const [account0, account1] = await Promise.all([\n          cache.queryAccount(connection, p.pubkeys.holdingAccounts[0]),\n          cache.queryAccount(connection, p.pubkeys.holdingAccounts[1]),\n        ]);\n        const amount =\n          (account0.info.amount.toNumber() || 0) +\n          (account1.info.amount.toNumber() || 0);\n        if (amount > 0) {\n          poolQuantities[i.toString()] = amount;\n        }\n      }\n      if (Object.keys(poolQuantities).length > 0) {\n        const sorted = Object.entries(\n          poolQuantities\n        ).sort(([pool0Idx, amount0], [pool1Idx, amount1]) =>\n          amount0 > amount1 ? -1 : 1\n        );\n        const bestPool = matchingPool[parseInt(sorted[0][0])];\n        setPool(bestPool);\n        return;\n      }\n    })();\n  }, [connection, sortedMints, pools]);\n\n  return pool;\n};\n\nexport const useOwnedPools = (legacy = false) => {\n  const { pools } = useCachedPool(legacy);\n  const { userAccounts } = useUserAccounts();\n\n  const ownedPools = useMemo(() => {\n    const map = userAccounts.reduce((acc, item) => {\n      const key = item.info.mint.toBase58();\n      acc.set(key, [...(acc.get(key) || []), item]);\n      return acc;\n    }, new Map<string, TokenAccount[]>());\n\n    return pools\n      .filter((p) => map.has(p.pubkeys.mint.toBase58()) && p.legacy === legacy)\n      .map((item) => {\n        let feeAccount = item.pubkeys.feeAccount?.toBase58();\n        return map.get(item.pubkeys.mint.toBase58())?.map((a) => {\n          return {\n            account: a as TokenAccount,\n            isFeeAccount: feeAccount === a.pubkey.toBase58(),\n            pool: item,\n          };\n        }) as {\n          account: TokenAccount;\n          isFeeAccount: boolean;\n          pool: PoolInfo;\n        }[];\n      })\n      .flat();\n  }, [pools, userAccounts, legacy]);\n\n  return ownedPools;\n};\n\n// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nconst SLIPPAGE = 0.005;\n\nasync function _addLiquidityExistingPool(\n  pool: PoolInfo,\n  components: LiquidityComponent[],\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const reserve0 = accountA.info.amount.toNumber();\n  const reserve1 = accountB.info.amount.toNumber();\n  const fromA =\n    accountA.info.mint.toBase58() === components[0].mintAddress\n      ? components[0]\n      : components[1];\n  const fromB = fromA === components[0] ? components[1] : components[0];\n\n  if (!fromA.account || !fromB.account) {\n    throw new Error(\"Missing account info.\");\n  }\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount0 = fromA.amount;\n  const amount1 = fromB.amount;\n\n  const liquidity = Math.min(\n    (amount0 * (1 - SLIPPAGE) * supply) / reserve0,\n    (amount1 * (1 - SLIPPAGE) * supply) / reserve1\n  );\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKeyA = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromA.account,\n    wallet.publicKey,\n    amount0 + accountRentExempt,\n    signers\n  );\n  const fromKeyB = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromB.account,\n    wallet.publicKey,\n    amount1 + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  const isLatestSwap = isLatest(pool.raw.account);\n  // create approval for transfer transactions\n  const transferAuthority = approveAmount(\n    instructions,\n    cleanupInstructions,\n    fromKeyA,\n    wallet.publicKey,\n    amount0,\n    isLatestSwap ? undefined : authority\n  );\n  if (isLatestSwap) {\n    signers.push(transferAuthority);\n  }\n\n  approveAmount(\n    instructions,\n    cleanupInstructions,\n    fromKeyB,\n    wallet.publicKey,\n    amount1,\n    isLatestSwap ? transferAuthority.publicKey : authority\n  );\n\n  // deposit\n  instructions.push(\n    depositInstruction(\n      pool.pubkeys.account,\n      authority,\n      transferAuthority.publicKey,\n      fromKeyA,\n      fromKeyB,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      liquidity,\n      amount0,\n      amount1,\n      isLatestSwap\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nasync function _addLiquidityExactOneExistingPool(\n  pool: PoolInfo,\n  component: LiquidityComponent,\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const from = component;\n\n  if (!from.account) {\n    throw new Error(\"Missing account info.\");\n  }\n  const reserve =\n    accountA.info.mint.toBase58() === from.mintAddress\n      ? accountA.info.amount.toNumber()\n      : accountB.info.amount.toNumber();\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount = from.amount;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _liquidityTokenTempMath = (amount * (1 - SLIPPAGE) * supply) / reserve;\n  const liquidityToken = 0;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKey = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    from.account,\n    wallet.publicKey,\n    amount + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  const isLatestSwap = isLatest(pool.raw.account);\n  // create approval for transfer transactions\n  const transferAuthority = approveAmount(\n    instructions,\n    cleanupInstructions,\n    fromKey,\n    wallet.publicKey,\n    amount,\n    isLatestSwap ? undefined : authority\n  );\n  if (isLatestSwap) {\n    signers.push(transferAuthority);\n  }\n\n  // deposit\n  instructions.push(\n    depositExactOneInstruction(\n      pool.pubkeys.account,\n      authority,\n      transferAuthority.publicKey,\n      fromKey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amount,\n      liquidityToken,\n      isLatestSwap\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction findOrCreateAccountByMint(\n  payer: PublicKey,\n  owner: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  accountRentExempt: number,\n  mint: PublicKey, // use to identify same type\n  signers: Account[],\n  excluded?: Set<string>\n): PublicKey {\n  const accountToFind = mint.toBase58();\n  const account = getCachedAccount(\n    (acc) =>\n      acc.info.mint.toBase58() === accountToFind &&\n      acc.info.owner.toBase58() === owner.toBase58() &&\n      (excluded === undefined || !excluded.has(acc.pubkey.toBase58()))\n  );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = account.pubkey;\n  } else {\n    // creating depositor pool account\n    const newToAccount = createSplAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      AccountLayout.span\n    );\n\n    toAccount = newToAccount.publicKey;\n    signers.push(newToAccount);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          programIds().token,\n          toAccount,\n          payer,\n          payer,\n          []\n        )\n      );\n    }\n  }\n\n  return toAccount;\n}\n\nfunction estimateProceedsFromInput(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  inputAmount: number\n): number {\n  return (\n    (proceedsQuantityInPool * inputAmount) / (inputQuantityInPool + inputAmount)\n  );\n}\n\nfunction estimateInputFromProceeds(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  proceedsAmount: number\n): number | string {\n  if (proceedsAmount >= proceedsQuantityInPool) {\n    return \"Not possible\";\n  }\n\n  return (\n    (inputQuantityInPool * proceedsAmount) /\n    (proceedsQuantityInPool - proceedsAmount)\n  );\n}\n\nexport enum PoolOperation {\n  Add,\n  SwapGivenInput,\n  SwapGivenProceeds,\n}\n\nexport async function calculateDependentAmount(\n  connection: Connection,\n  independent: string,\n  amount: number,\n  pool: PoolInfo,\n  op: PoolOperation\n): Promise<number | string | undefined> {\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const amountA = accountA.info.amount.toNumber();\n\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  let amountB = accountB.info.amount.toNumber();\n\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (poolMint.supply.eqn(0)) {\n    return;\n  }\n\n  let offsetAmount = 0;\n  const offsetCurve = pool.raw?.data?.curve?.offset;\n  if (offsetCurve) {\n    offsetAmount = offsetCurve.token_b_offset;\n    amountB = amountB + offsetAmount;\n  }\n\n  const mintA = await cache.queryMint(connection, accountA.info.mint);\n  const mintB = await cache.queryMint(connection, accountB.info.mint);\n\n  if (!mintA || !mintB) {\n    return;\n  }\n\n  const isFirstIndependent = accountA.info.mint.toBase58() === independent;\n  const depPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintB.decimals : mintA.decimals\n  );\n  const indPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintA.decimals : mintB.decimals\n  );\n  const indAdjustedAmount = amount * indPrecision;\n\n  let indBasketQuantity = isFirstIndependent ? amountA : amountB;\n\n  let depBasketQuantity = isFirstIndependent ? amountB : amountA;\n\n  var depAdjustedAmount;\n\n  const constantPrice = pool.raw?.data?.curve?.constantPrice;\n  if (constantPrice) {\n    if (isFirstIndependent) {\n      depAdjustedAmount = (amount * depPrecision) / constantPrice.token_b_price;\n    } else {\n      depAdjustedAmount = (amount * depPrecision) * constantPrice.token_b_price;\n    }\n  } else {\n    switch (+op) {\n      case PoolOperation.Add:\n        depAdjustedAmount =\n          (depBasketQuantity / indBasketQuantity) * indAdjustedAmount;\n        break;\n      case PoolOperation.SwapGivenProceeds:\n        depAdjustedAmount = estimateInputFromProceeds(\n          depBasketQuantity,\n          indBasketQuantity,\n          indAdjustedAmount\n        );\n        break;\n      case PoolOperation.SwapGivenInput:\n        depAdjustedAmount = estimateProceedsFromInput(\n          indBasketQuantity,\n          depBasketQuantity,\n          indAdjustedAmount\n        );\n        break;\n    }\n  }\n\n  if (typeof depAdjustedAmount === \"string\") {\n    return depAdjustedAmount;\n  }\n  if (depAdjustedAmount === undefined) {\n    return undefined;\n  }\n  return depAdjustedAmount / depPrecision;\n}\n\n// TODO: add ui to customize curve type\nasync function _addLiquidityNewPool(\n  wallet: any,\n  connection: Connection,\n  components: LiquidityComponent[],\n  options: PoolConfig\n) {\n  notify({\n    message: \"Creating new pool...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  if (components.some((c) => !c.account)) {\n    notify({\n      message: \"You need to have balance for all legs in the basket...\",\n      description: \"Please review inputs.\",\n      type: \"error\",\n    });\n    return;\n  }\n\n  let instructions: TransactionInstruction[] = [];\n  let cleanupInstructions: TransactionInstruction[] = [];\n\n  const liquidityTokenMint = new Account();\n  // Create account for pool liquidity token\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: liquidityTokenMint.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      ),\n      space: MintLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  const tokenSwapAccount = new Account();\n\n  const [authority, nonce] = await PublicKey.findProgramAddress(\n    [tokenSwapAccount.publicKey.toBuffer()],\n    programIds().swap\n  );\n\n  // create mint for pool liquidity token\n  instructions.push(\n    Token.createInitMintInstruction(\n      programIds().token,\n      liquidityTokenMint.publicKey,\n      LIQUIDITY_TOKEN_PRECISION,\n      // pass control of liquidity mint to swap program\n      authority,\n      // swap program can freeze liquidity token mint\n      null\n    )\n  );\n\n  // Create holding accounts for\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const holdingAccounts: Account[] = [];\n  let signers: Account[] = [];\n\n  components.forEach((leg) => {\n    if (!leg.account) {\n      return;\n    }\n\n    const mintPublicKey = leg.account.info.mint;\n    // component account to store tokens I of N in liquidity poll\n    holdingAccounts.push(\n      createSplAccount(\n        instructions,\n        wallet.publicKey,\n        accountRentExempt,\n        mintPublicKey,\n        authority,\n        AccountLayout.span\n      )\n    );\n  });\n\n  // creating depositor pool account\n  const depositorAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenMint.publicKey,\n    wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // creating fee pool account its set from env variable or to creater of the pool\n  // creater of the pool is not allowed in some versions of token-swap program\n  const feeAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenMint.publicKey,\n    SWAP_PROGRAM_OWNER_FEE_ADDRESS || wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // create all accounts in one transaction\n  let tx = await sendTransaction(connection, wallet, instructions, [\n    liquidityTokenMint,\n    depositorAccount,\n    feeAccount,\n    ...holdingAccounts,\n    ...signers,\n  ]);\n\n  notify({\n    message: \"Accounts created\",\n    description: `Transaction ${tx}`,\n    type: \"success\",\n  });\n\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  signers = [];\n  instructions = [];\n  cleanupInstructions = [];\n\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: tokenSwapAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        programIds().swapLayout.span\n      ),\n      space: programIds().swapLayout.span,\n      programId: programIds().swap,\n    })\n  );\n\n  components.forEach((leg, i) => {\n    if (!leg.account) {\n      return;\n    }\n\n    // create temporary account for wrapped sol to perform transfer\n    const from = getWrappedAccount(\n      instructions,\n      cleanupInstructions,\n      leg.account,\n      wallet.publicKey,\n      leg.amount + accountRentExempt,\n      signers\n    );\n\n    instructions.push(\n      Token.createTransferInstruction(\n        programIds().token,\n        from,\n        holdingAccounts[i].publicKey,\n        wallet.publicKey,\n        [],\n        leg.amount\n      )\n    );\n  });\n\n  instructions.push(\n    createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      holdingAccounts[0].publicKey,\n      holdingAccounts[1].publicKey,\n      liquidityTokenMint.publicKey,\n      feeAccount.publicKey,\n      depositorAccount.publicKey,\n      programIds().token,\n      programIds().swap,\n      nonce,\n      options,\n      programIds().swapLayout === TokenSwapLayout\n    )\n  );\n\n  // All instructions didn't fit in single transaction\n  // initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n  tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    [tokenSwapAccount, ...signers]\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction approveAmount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  account: PublicKey,\n  owner: PublicKey,\n  amount: number,\n\n  // if delegate is not passed ephemeral transfer authority is used\n  delegate?: PublicKey\n) {\n  const tokenProgram = programIds().token;\n  const transferAuthority = new Account();\n\n  instructions.push(\n    Token.createApproveInstruction(\n      tokenProgram,\n      account,\n      delegate ?? transferAuthority.publicKey,\n      owner,\n      [],\n      amount\n    )\n  );\n\n  cleanupInstructions.push(\n    Token.createRevokeInstruction(tokenProgram, account, owner, [])\n  );\n\n  return transferAuthority;\n}\n\nfunction getWrappedAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount,\n  payer: PublicKey,\n  amount: number,\n  signers: Account[]\n) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      WRAPPED_SOL_MINT,\n      account.publicKey,\n      payer\n    )\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      programIds().token,\n      account.publicKey,\n      payer,\n      payer,\n      []\n    )\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nfunction createSplAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  accountRentExempt: number,\n  mint: PublicKey,\n  owner: PublicKey,\n  space: number\n) {\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: accountRentExempt,\n      space,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      mint,\n      account.publicKey,\n      owner\n    )\n  );\n\n  return account;\n}\n","export * from \"./pool\";\nexport * from \"./account\";\nexport * from \"./tokenSwap\";\n","import React from \"react\";\nimport { notification } from \"antd\";\n// import Link from '../components/Link';\n\nexport function notify({\n  message = \"\",\n  description = undefined as any,\n  txid = \"\",\n  type = \"info\",\n  placement = \"bottomLeft\",\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: \"black\" }}>{message}</span>,\n    description: (\n      <span style={{ color: \"black\", opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: \"white\",\n    },\n  });\n}\n","import { PublicKey, Transaction } from \"@solana/web3.js\";\n\nexport const DEFAULT_PUBLIC_KEY = new PublicKey(\n  \"11111111111111111111111111111111\"\n);\n\nexport interface WalletAdapter {\n  publicKey: PublicKey;\n  autoApprove: boolean;\n  connected: boolean;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transaction: Transaction[]) => Promise<Transaction[]>;\n  connect: () => any;\n  disconnect: () => any;\n  on<T>(event: string, fn: () => void): this;\n}\n","import type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"@solana/web3.js\";\n\nimport EventEmitter from \"eventemitter3\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { notify } from \"../../utils/notifications\";\nimport { getPublicKey, signTransaction } from \"./core\";\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from \"../types\";\n\nexport class LedgerWalletAdapter extends EventEmitter implements WalletAdapter {\n  _connecting: boolean;\n  _publicKey: PublicKey | null;\n  _transport: Transport | null;\n\n  constructor() {\n    super();\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    const result: Transaction[] = [];\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i];\n      const signed = await this.signTransaction(transaction);\n      result.push(signed);\n    }\n\n    return result;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error(\"Not connected to Ledger\");\n    }\n\n    // @TODO: account selection (derivation path changes with account)\n    const signature = await signTransaction(this._transport, transaction);\n\n    transaction.addSignature(this._publicKey, signature);\n\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create();\n      // @TODO: account selection\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit(\"connect\", this._publicKey);\n    } catch (error) {\n      notify({\n        message: \"Ledger Error\",\n        description: error.message,\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit(\"disconnect\");\n    }\n  }\n}\n","import EventEmitter from \"eventemitter3\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { notify } from \"../../utils/notifications\";\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from \"../types\";\n\nexport class SolongWalletAdapter extends EventEmitter implements WalletAdapter {\n  _publicKey?: PublicKey;\n  _onProcess: boolean;\n  _connected: boolean;\n  constructor() {\n    super();\n    this._onProcess = false;\n    this._connected = false;\n    this.connect = this.connect.bind(this);\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    const solong = (window as any).solong;\n    if (solong.signAllTransactions) {\n      return solong.signAllTransactions(transactions);\n    } else {\n      const result: Transaction[] = [];\n      for (let i = 0; i < transactions.length; i++) {\n        const transaction = transactions[i];\n        const signed = await solong.signTransaction(transaction);\n        result.push(signed);\n      }\n\n      return result;\n    }\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    return (window as any).solong.signTransaction(transaction);\n  }\n\n  connect() {\n    if (this._onProcess) {\n      return;\n    }\n\n    if ((window as any).solong === undefined) {\n      notify({\n        message: \"Solong Error\",\n        description: \"Please install solong wallet from Chrome \",\n      });\n      return;\n    }\n\n    this._onProcess = true;\n    (window as any).solong\n      .selectAccount()\n      .then((account: any) => {\n        this._publicKey = new PublicKey(account);\n        this._connected = true;\n        this.emit(\"connect\", this._publicKey);\n      })\n      .catch(() => {\n        this.disconnect();\n      })\n      .finally(() => {\n        this._onProcess = false;\n      });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit(\"disconnect\");\n    }\n  }\n}\n","import EventEmitter from \"eventemitter3\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { notify } from \"../../utils/notifications\";\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from \"../types\";\n\ntype PhantomEvent = \"disconnect\" | \"connect\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\";\n\ninterface PhantomProvider {\n  publicKey?: PublicKey;\n  isConnected?: boolean;\n  autoApprove?: boolean;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<any>;\n}\n\nexport class PhantomWalletAdapter\n  extends EventEmitter\n  implements WalletAdapter {\n  _provider: PhantomProvider | undefined;\n  constructor() {\n    super();\n    this.connect = this.connect.bind(this);\n  }\n\n  get connected() {\n    return this._provider?.isConnected || false;\n  }\n\n  get autoApprove() {\n    return this._provider?.autoApprove || false;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    return this._provider?.publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect = async () => {\n    if (this._provider) {\n      return;\n    }\n\n    let provider: PhantomProvider;\n    if ((window as any)?.solana?.isPhantom) {\n      provider = (window as any).solana;\n    } else {\n      window.open(\"https://phantom.app/\", \"_blank\");\n      notify({\n        message: \"Phantom Error\",\n        description: \"Please install Phantom wallet from Chrome \",\n      });\n      return;\n    }\n\n    provider.on('connect', () => {\n      this._provider = provider;\n      this.emit(\"connect\");\n    })\n\n    if (!provider.isConnected) {\n      await provider.connect();\n    }\n\n    this._provider = provider;\n    this.emit(\"connect\");\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n      this._provider = undefined;\n      this.emit(\"disconnect\");\n    }\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\n\nexport class MathWalletAdapter extends EventEmitter implements WalletAdapter {\n  _publicKey?: PublicKey;\n  _onProcess: boolean;\n  _connected: boolean;\n  constructor() {\n    super();\n    this._onProcess = false;\n    this._connected = false;\n    this.connect = this.connect.bind(this);\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  private get _provider() {\n    if ((window as any)?.solana?.isMathWallet) {\n      return (window as any).solana;\n    }\n    return undefined;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    if (this._onProcess) {\n      return;\n    }\n\n    if (!this._provider) {\n      window.open('https://mathwallet.org/', '_blank');\n      notify({\n        message: 'Math Wallet Error',\n        description: 'Please install mathwallet',\n      });\n      return;\n    }\n\n    this._onProcess = true;\n    this._provider\n      .getAccount()\n      .then((account: any) => {\n        this._publicKey = new PublicKey(account);\n        this._connected = true;\n        this.emit('connect', this._publicKey);\n      })\n      .catch(() => {\n        this.disconnect();\n      })\n      .finally(() => {\n        this._onProcess = false;\n      });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit('disconnect');\n    }\n  }\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Button, Modal } from \"antd\";\nimport {\n  WalletAdapter,\n  LedgerWalletAdapter,\n  SolongWalletAdapter,\n  PhantomWalletAdapter,\n  MathWalletAdapter,\n} from \"../wallet-adapters\";\nimport { useConnectionConfig } from \"../utils/connection\";\nimport { useLocalStorageState } from \"../utils/utils\";\nimport { notify } from \"../utils/notifications\";\n\nconst ASSET_URL =\n  \"https://cdn.jsdelivr.net/gh/solana-labs/oyster@main/assets/wallets\";\nexport const WALLET_PROVIDERS = [\n  {\n    name: \"sollet.io\",\n    url: \"https://www.sollet.io\",\n    icon: `${ASSET_URL}/sollet.svg`,\n  },\n  {\n    name: \"Solflare\",\n    url: \"https://solflare.com/access-wallet\",\n    icon: `${ASSET_URL}/solflare.svg`,\n  },\n  {\n    name: \"Ledger\",\n    url: \"https://www.ledger.com\",\n    icon: `${ASSET_URL}/ledger.svg`,\n    adapter: LedgerWalletAdapter,\n  },\n  {\n    name: \"Solong\",\n    url: \"https://www.solong.com\",\n    icon: `${ASSET_URL}/solong.png`,\n    adapter: SolongWalletAdapter,\n  },\n  {\n    name: \"MathWallet\",\n    url: \"https://www.mathwallet.org\",\n    icon: `${ASSET_URL}/mathwallet.svg`,\n    adapter: MathWalletAdapter,\n  },\n  {\n    name: \"Phantom\",\n    url: \"https://www.phantom.app\",\n    icon: `https://www.phantom.app/img/logo.png`,\n    adapter: PhantomWalletAdapter,\n  },\n];\n\nconst WalletContext = React.createContext<any>(null);\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n\n  const [autoConnect, setAutoConnect] = useState(false);\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n\n  const provider = useMemo(\n    () => WALLET_PROVIDERS.find(({ url }) => url === providerUrl),\n    [providerUrl]\n  );\n\n  const wallet = useMemo(\n    function () {\n      if (provider) {\n        return new (provider.adapter || Wallet)(\n          providerUrl,\n          endpoint\n        ) as WalletAdapter;\n      }\n    },\n    [provider, providerUrl, endpoint]\n  );\n\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    if (wallet) {\n      wallet.on(\"connect\", () => {\n        if (wallet.publicKey) {\n          console.log(\"connected\");\n          localStorage.removeItem(\"feeDiscountKey\");\n          setConnected(true);\n          const walletPublicKey = wallet.publicKey.toBase58();\n          const keyToDisplay =\n            walletPublicKey.length > 20\n              ? `${walletPublicKey.substring(\n                  0,\n                  7\n                )}.....${walletPublicKey.substring(\n                  walletPublicKey.length - 7,\n                  walletPublicKey.length\n                )}`\n              : walletPublicKey;\n\n          notify({\n            message: \"Wallet update\",\n            description: \"Connected to wallet \" + keyToDisplay,\n          });\n        }\n      });\n\n      wallet.on(\"disconnect\", () => {\n        setConnected(false);\n        notify({\n          message: \"Wallet update\",\n          description: \"Disconnected from wallet\",\n        });\n        localStorage.removeItem(\"feeDiscountKey\");\n      });\n    }\n\n    return () => {\n      setConnected(false);\n      if (wallet) {\n        wallet.disconnect();\n        setConnected(false);\n      }\n    };\n  }, [wallet]);\n\n  useEffect(() => {\n    if (wallet && autoConnect) {\n      wallet.connect();\n      setAutoConnect(false);\n    }\n\n    return () => {};\n  }, [wallet, autoConnect]);\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const select = useCallback(() => setIsModalVisible(true), []);\n  const close = useCallback(() => setIsModalVisible(false), []);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        select,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n      <Modal\n        title=\"Select Wallet\"\n        okText=\"Connect\"\n        visible={isModalVisible}\n        okButtonProps={{ style: { display: \"none\" } }}\n        onCancel={close}\n        width={400}\n      >\n        {WALLET_PROVIDERS.map((provider) => {\n          const onClick = function () {\n            setProviderUrl(provider.url);\n            setAutoConnect(true);\n            close();\n          };\n\n          return (\n            <Button\n              size=\"large\"\n              type={providerUrl === provider.url ? \"primary\" : \"ghost\"}\n              onClick={onClick}\n              icon={\n                <img\n                  alt={`${provider.name}`}\n                  width={20}\n                  height={20}\n                  src={provider.icon}\n                  style={{ marginRight: 8 }}\n                />\n              }\n              style={{\n                display: \"block\",\n                width: \"100%\",\n                textAlign: \"left\",\n                marginBottom: 8,\n              }}\n            >\n              {provider.name}\n            </Button>\n          );\n        })}\n      </Modal>\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"Missing wallet context\");\n  }\n\n  const wallet = context.wallet;\n  return {\n    connected: context.connected,\n    wallet: wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n    select: context.select,\n    connect() {\n      wallet ? wallet.connect() : context.select();\n    },\n    disconnect() {\n      wallet?.disconnect();\n    },\n  };\n}\n"],"sourceRoot":""}